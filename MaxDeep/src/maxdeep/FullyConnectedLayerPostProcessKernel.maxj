package maxdeep;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
// import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
// import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class FullyConnectedLayerPostProcessKernel extends Kernel {

  public static final String INP_NAME = "POST_PROCESS_INP";
  public static final String OUT_NAME = "POST_PROCESS_OUT";
  public static final String SCALAR_HEIGHT_NAME = "FC_CACHE_SCALAR_HEIGHT";
  public static final String SCALAR_WIDTH_NAME  = "FC_CACHE_SCALAR_WIDTH";

  public FullyConnectedLayerPostProcessKernel(
    KernelParameters params,
    int maxHeight,
    int maxWidth
  ) {
    super(params);

    DFEType type = dfeUInt(32);

    /**
     * Scalar inputs:
     * - height: height of the current FC layer
     * - width: width of the current FC layer
     */
    DFEVar height = io.scalarInput(SCALAR_HEIGHT_NAME, dfeUInt(32));
    DFEVar width  = io.scalarInput(SCALAR_WIDTH_NAME, dfeUInt(32));

    /**
     * Counters
     */
    CounterChain chain = control.count.makeCounterChain();
    chain.addCounter(height, 1).cast(dfeUInt(32));
    DFEVar w = chain.addCounter(width, 1).cast(dfeUInt(32));
    w = optimization.pipeline(w);

    /**
     * Input
     */
    DFEVar inp = io.input(INP_NAME, type);

    /**
     * Accumulator
     */
    DFEVar carriedSum = type.newInstance(this);
    DFEVar sum = (w === 0) ? constant.var(0) : carriedSum;
    DFEVar newSum = sum + inp;
    carriedSum <== stream.offset(newSum, -1);

    /**
     * Output
     */
    io.output(OUT_NAME, newSum, type, w === width - 1);
  }
}
