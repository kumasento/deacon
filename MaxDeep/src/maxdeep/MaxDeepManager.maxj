package maxdeep;

// import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager.LMemFrequency;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  private static final String MAXDEEP_KERNEL_NAME
    = "MaxDeepKernel";
  private static final String MULTI_PUMPED_CONVOLVE_KERNEL_NAME
    = "MultiPumpedConvolveKernel";
  private static final String CONV_CACHE_KERNEL_NAME
    = "ConvolutionLayerCacheKernel";
  
  private static final String DEFAULT_KERNEL_CLK = "DefaultKernelClock";
  private static final String MULTI_PUMPED_KERNEL_CLK = "MultiPumpedKernelClock";

  private final int K;
  private final int N;
  private final int C;
  private final int freq;
  protected LMemInterface iface;

  public MaxDeepManager(MaxDeepEngineParameters params) {
    super(params);

    K = params.getKernelSize();
    N = params.getNumPipes();
    C = params.getMultiPumpingFactor();
    freq = params.getFreq();

    addMaxFileConstant("kernelSize", K);
    addMaxFileConstant("numPipes", N);
    addMaxFileConstant("freq", freq);
    addMaxFileConstant("multiPumpingFactor", C);

    ConvolutionLayerParameter convParams =
      new ConvolutionLayerParameter(
          8, 8, 3, 96, 4, 0, 0);

    KernelBlock k = addKernel(
        new MultiPumpedConvolveKernel(
          makeKernelParameters(MULTI_PUMPED_CONVOLVE_KERNEL_NAME),
          N, K, C));
    KernelBlock cache = addKernel(
        new ConvolutionLayerCacheKernel(
          makeKernelParameters(CONV_CACHE_KERNEL_NAME),
          convParams));

    iface = addLMemInterface();

    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, k, MultiPumpedConvolveKernel.OUT_NAME);

    k.getInput(MultiPumpedConvolveKernel.INP_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_INP_NAME);
    k.getInput(MultiPumpedConvolveKernel.WGT_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_WGT_NAME);

    config.setDefaultStreamClockFrequency(freq);
    ManagerClock clock =
      generateStreamClock(DEFAULT_KERNEL_CLK, freq);
    ManagerClock clockForMPC =
      generateStreamClock(MULTI_PUMPED_KERNEL_CLK, freq * C);
    k.setClock(clockForMPC);

    config.setOnCardMemoryFrequency(LMemFrequency.MAX4MAIA_533);
  }

  private EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();

    InterfaceParam zero        = ei.addConstant(0);
    InterfaceParam kernelSize  = ei.addConstant(4);
    InterfaceParam height      = ei.addConstant(8);
    InterfaceParam width       = ei.addConstant(8);
    InterfaceParam numChannels = ei.addConstant(3);
    InterfaceParam numFilters  = ei.addConstant(96);
    InterfaceParam numOutput   = (height - kernelSize + 1) * (width - kernelSize + 1) * numFilters;

    ei.setTicks(CONV_CACHE_KERNEL_NAME,
        height * width * numChannels * numFilters);
    ei.setTicks(MULTI_PUMPED_CONVOLVE_KERNEL_NAME,
        numOutput * numChannels);

    InterfaceParam inpSize
      = height * width * numChannels * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam wgtSize
      = kernelSize * kernelSize * numChannels * numFilters * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam outSize
      = numOutput * CPUTypes.UINT32.sizeInBytes();

    ei.setLMemLinear(ConvolutionLayerCacheKernel.INP_NAME, zero, inpSize);
    ei.setLMemLinear(ConvolutionLayerCacheKernel.WGT_NAME, inpSize, wgtSize);
    ei.setLMemLinear(MultiPumpedConvolveKernel.OUT_NAME, inpSize + wgtSize, outSize);

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  public static void main(String [] args) {
    MaxDeepEngineParameters params = new MaxDeepEngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(manager.interfaceDefault());
    manager.build();
  }
}
