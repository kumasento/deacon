package maxdeep;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class MaxDeepManager extends CustomManager {

  private static final String MAXDEEP_KERNEL_NAME = "MaxDeepKernel";
  private static final int K = 4;
  private static final int N = 4;

  public MaxDeepManager(EngineParameters params) {
    super(params);

    KernelBlock k = addKernel(
        new MaxDeepKernel(makeKernelParameters(MAXDEEP_KERNEL_NAME), N, K));

    DFELink x = addStreamFromCPU("x");
    k.getInput("inputVector") <== x;

    DFELink w = addStreamFromCPU("w");
    k.getInput("weightVector") <== w;

    DFELink y = addStreamToCPU("y");
    y <== k.getOutput("outputVector");
  }

  private static EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();
    InterfaceParam size = ei.addParam("dataSize", CPUTypes.INT32);
    ei.setTicks(MAXDEEP_KERNEL_NAME, size / (K * K * N));
    ei.setStream("x", CPUTypes.UINT32, size * CPUTypes.UINT32.sizeInBytes());
    ei.setStream("w", CPUTypes.UINT32, size * CPUTypes.UINT32.sizeInBytes());
    ei.setStream("y", CPUTypes.UINT32, size / (K * K) * CPUTypes.UINT32.sizeInBytes());
    return ei;
  }

  public static void main(String [] args) {
    EngineParameters params = new EngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(interfaceDefault());
    manager.build();
  }
}
