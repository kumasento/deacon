package maxdeep;

// import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
// import com.maxeler.maxcompiler.v2.managers.custom.CustomManager.LMemFrequency;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;
// import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  // private static final String MAXDEEP_KERNEL_NAME
  //   = "MaxDeepKernel";
  private static final String MULTI_PUMPED_CONVOLVE_KERNEL_NAME
    = "MultiPumpedConvolveKernel";
  private static final String CONV_CACHE_KERNEL_NAME
    = "ConvolutionLayerCacheKernel";
  private static final String CONV_POST_PROCESS_KERNEL_NAME
    = "ConvolutionLayerPostProcessKernel";
  private static final String MULTI_PUMPED_DOT_PRODUCT_KERNEL_NAME
    = "MultiPumpedDotProductKernel";
  private static final String FC_CACHE_KERNEL_NAME
    = "FullyConnectedLayerCacheKernel";
  private static final String FC_POST_PROCESS_KERNEL_NAME
    = "FullyConnectedLayerPostProcessKernel";
  private static final String POOL_KERNEL_NAME
    = "PoolingLayerKernel";
  private static final String PADDING_KERNEL_NAME
    = "PaddingKernelConvolution";
  private static final String PADDING_KERNEL_FC_NAME
    = "PaddingKernelFullyConnected";
  
  private static final String DEFAULT_KERNEL_CLK = "DefaultKernelClock";
  private static final String MPC_CLK = "MPCClock";
  private static final String MPDP_CLK = "MPDPClock";

  /**
   * Engine parameters
   */
  private final int N;
  private final int C;
  private final int freq;
  private final int maxConvHeight;
  private final int maxConvWidth;
  private final int maxConvNumChannels;
  private final int maxConvNumFilters;
  private final int maxConvKernelSize;
  private final int maxFCHeight;
  private final int maxFCWidth;
  private final int numFCRowPipes;
  private final int numFCColPipes;
  private final int numMPDPFactor;
  private final int poolKernelSize = 2;
  private final int poolStride = 2;

  /**
   * Interface Parameters
   */
  private InterfaceParam zero;
  private InterfaceParam kernelSize;
  private InterfaceParam height; 
  private InterfaceParam width;
  private InterfaceParam numChannels;
  private InterfaceParam numFilters;
  private InterfaceParam numOutput;
  private InterfaceParam convOutputHeight;
  private InterfaceParam convOutputWidth;
  private InterfaceParam fcHeight;
  private InterfaceParam fcWidth;
  private InterfaceParam poolHeight;
  private InterfaceParam poolWidth;
  private InterfaceParam paddedNumFilterCycles;
  private InterfaceParam paddedNumFilters;
  private InterfaceParam baseAddr;

  protected LMemInterface iface;

  public MaxDeepManager(MaxDeepEngineParameters params) {
    super(params);

    /**
     * Parse engine parameters
     */
    N                  = params.getNumPipes();
    C                  = params.getMultiPumpingFactor();
    freq               = params.getFreq();
    maxConvHeight      = params.getMaxConvHeight();
    maxConvWidth       = params.getMaxConvWidth();
    maxConvNumChannels = params.getMaxConvNumChannels();
    maxConvNumFilters  = params.getMaxConvNumFilters();
    maxConvKernelSize  = params.getMaxConvKernelSize();
    maxFCHeight        = params.getMaxFCHeight();
    maxFCWidth         = params.getMaxFCWidth();
    numFCRowPipes      = params.getNumFCRowPipes();
    numFCColPipes      = params.getNumFCColPipes();
    numMPDPFactor      = params.getNumMPDPFactor();

    /**
     * Export parameters to Maxfile.h
     */
    addMaxFileConstant("numPipes",           N);
    addMaxFileConstant("freq",               freq);
    addMaxFileConstant("multiPumpingFactor", C);
    addMaxFileConstant("maxConvHeight",      maxConvHeight);
    addMaxFileConstant("maxConvWidth",       maxConvWidth);
    addMaxFileConstant("maxConvNumChannels", maxConvNumChannels);
    addMaxFileConstant("maxConvNumFilters",  maxConvNumFilters);
    addMaxFileConstant("maxConvKernelSize",  maxConvKernelSize);
    addMaxFileConstant("maxFCHeight",        maxFCHeight);
    addMaxFileConstant("maxFCWidth",         maxFCWidth);

    // ManagerUtils.setDRAMMaxDeviceFrequency(this, params);
    // NOTE: This option will help timing when using multiple kernels
    // (2017-03-03)
    KernelConfiguration kernelConfiguration = this.getCurrentKernelConfig();
    kernelConfiguration.optimization.setUseGlobalClockBuffer(true);
    // kernelConfiguration.optimization.setCEPipelining(2);

    /**
     * Kernel Blocks
     */
    KernelBlock mpc = addKernel(
      new MultiPumpedConvolveKernel(
        makeKernelParameters(MULTI_PUMPED_CONVOLVE_KERNEL_NAME),
        N, maxConvKernelSize, C, params.getDbg()));
    KernelBlock mpdp = addKernel(
      new MultiPumpedDotProductKernel(
        makeKernelParameters(MULTI_PUMPED_DOT_PRODUCT_KERNEL_NAME),
        numFCRowPipes, numFCColPipes, numMPDPFactor, params.getDbg()));
    KernelBlock cache = addKernel(
      new ConvolutionLayerCacheKernel(
        makeKernelParameters(CONV_CACHE_KERNEL_NAME),
        N,
        maxConvHeight,
        maxConvWidth,
        maxConvNumChannels,
        maxConvNumFilters,
        maxConvKernelSize,
        params.getDbg()));
    KernelBlock post = addKernel(
      new ConvolutionLayerPostProcessKernel(
        makeKernelParameters(CONV_POST_PROCESS_KERNEL_NAME),
        N,
        maxConvHeight,
        maxConvWidth,
        maxConvNumChannels,
        maxConvNumFilters,
        maxConvKernelSize,
        params.getDbg()));
    KernelBlock fcCache = addKernel(
      new FullyConnectedLayerCacheKernel(
        makeKernelParameters(FC_CACHE_KERNEL_NAME),
        maxFCHeight,
        maxFCWidth,
        numFCRowPipes,
        numFCColPipes));
    KernelBlock fcPost = addKernel(
      new FullyConnectedLayerPostProcessKernel(
        makeKernelParameters(FC_POST_PROCESS_KERNEL_NAME),
        maxFCHeight,
        maxFCWidth,
        numFCRowPipes,
        numFCColPipes));
    KernelBlock pool = addKernel(
      new PoolingLayerKernel(
        makeKernelParameters(POOL_KERNEL_NAME),
        N,
        poolKernelSize,
        poolStride,
        maxConvWidth,
        params.getDbg()));
    KernelBlock paddingKernel = addKernel(
      new PaddingKernel(
        makeKernelParameters(PADDING_KERNEL_NAME)));
    KernelBlock paddingKernelFC = addKernel(
      new PaddingKernel(
        makeKernelParameters(PADDING_KERNEL_FC_NAME)));

    /**
     * LMem interface:
     * Input streams will come from the LMem to each layer's cache kernel.
     * Output streams will come from the padding kernel to the LMem
     */
    iface = addLMemInterface();

    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, fcCache, FullyConnectedLayerCacheKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, fcCache, FullyConnectedLayerCacheKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, paddingKernel, PaddingKernel.OUT_NAME, PaddingKernel.OUT_NAME + "_CONV");
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, paddingKernelFC, PaddingKernel.OUT_NAME, PaddingKernel.OUT_NAME + "_FC");

    /**
     * Connections between kernels' streams
     */
    mpc.getInput(MultiPumpedConvolveKernel.INP_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_INP_NAME);
    mpc.getInput(MultiPumpedConvolveKernel.WGT_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_WGT_NAME);
    mpdp.getInput(MultiPumpedDotProductKernel.INP_NAME)
      <== fcCache.getOutput(FullyConnectedLayerCacheKernel.OUT_INP_NAME);
    mpdp.getInput(MultiPumpedDotProductKernel.WGT_NAME)
      <== fcCache.getOutput(FullyConnectedLayerCacheKernel.OUT_WGT_NAME);
    post.getInput(ConvolutionLayerPostProcessKernel.INP_NAME)
      <== mpc.getOutput(MultiPumpedConvolveKernel.OUT_NAME);
    pool.getInput(PoolingLayerKernel.INP_NAME)
      <== post.getOutput(ConvolutionLayerPostProcessKernel.OUT_NAME);
    fcPost.getInput(FullyConnectedLayerPostProcessKernel.INP_NAME)
      <== mpdp.getOutput(MultiPumpedDotProductKernel.OUT_NAME);
    paddingKernel.getInput(PaddingKernel.INP_NAME)
      <== pool.getOutput(PoolingLayerKernel.OUT_NAME);
    paddingKernelFC.getInput(PaddingKernel.INP_NAME)
      <== fcPost.getOutput(FullyConnectedLayerPostProcessKernel.OUT_NAME);

    /**
     * Clock configuration
     */
    config.setDefaultStreamClockFrequency(freq);
    ManagerClock clk
      = generateStreamClock(DEFAULT_KERNEL_CLK, freq);
    ManagerClock clockForMPC
      = generateStreamClock(MPC_CLK, freq * C);
    ManagerClock clockForMPDP
      = generateStreamClock(MPDP_CLK, freq * numMPDPFactor);

    cache.setClock(clk);
    post.setClock(clk);
    paddingKernel.setClock(clk);
    fcCache.setClock(clk);
    fcPost.setClock(clk);

    mpc.setClock(clockForMPC);
    mpdp.setClock(clockForMPDP);
  }

  private void addConvParamsToEngineInterface(EngineInterface ei) {
    kernelSize = ei.addParam(
      "conv_kernel_size",
      CPUTypes.UINT32,
      "The kernel size of the current convolution layer computation"
    );
    height = ei.addParam(
      "conv_height",
      CPUTypes.UINT32,
      "The height of the current convolution layer computation"
    );
    width = ei.addParam(
      "conv_width",
      CPUTypes.UINT32,
      "The width of the current convolution layer computation"
    );
    numChannels = ei.addParam(
      "conv_num_channels",
      CPUTypes.UINT32,
      "The num of channels of the current convolution layer computation"
    );
    numFilters = ei.addParam(
      "conv_num_filters",
      CPUTypes.UINT32,
      "The number of filters of the current convolution layer computation"
    );
    numOutput = (
      (height - kernelSize + 1) *
      (width - kernelSize + 1) *
      numFilters
    );
    convOutputHeight = (height - kernelSize + 1);
    convOutputWidth = (width - kernelSize + 1);
    poolHeight = (height - kernelSize + 1);
    poolWidth = (width - kernelSize + 1);

    /**
     * NOTE: We will use the ceil(numFilters/N) as the cycles for computing
     * numFilters filters.
     */
    paddedNumFilterCycles
      = InterfaceMath.ceil(numFilters.cast(CPUTypes.DOUBLE) / N).cast(CPUTypes.UINT32);
    paddedNumFilters = paddedNumFilterCycles * N;
    
    baseAddr = zero;
  }

  private void addFCParamsToEngineInterface(EngineInterface ei) {
    fcHeight = ei.addParam(
      "fc_height",
      CPUTypes.UINT32,
      "The height of the current fully-connected layer computation"
    );
    fcWidth = ei.addParam(
      "fc_width",
      CPUTypes.UINT32,
      "The width of the current fully-connected layer computation"
    );
  }

  private void setTicksOfEngineInterface(EngineInterface ei) {
    /**
     * Setup cycles for each kernel (besides padding kernels).
     * - The conv cache kernel should process all elements in the input
     * feature map, AND send weights of all filters to the next level 
     * of convolution, thus the total number of ticks should be:
     *  height * width * numChannels * numFilters
     * With parallelisation in the filter level, the fourth term can be
     * replaced by the paddedNumFilterCycles.
     */ 
    ei.setTicks(CONV_CACHE_KERNEL_NAME,
      height * width * numChannels * paddedNumFilterCycles);
    ei.setTicks(MULTI_PUMPED_CONVOLVE_KERNEL_NAME,
      convOutputHeight * convOutputWidth * numChannels * paddedNumFilterCycles * C);
    ei.setTicks(CONV_POST_PROCESS_KERNEL_NAME,
      convOutputHeight * convOutputWidth * numChannels * paddedNumFilterCycles);
    ei.setTicks(FC_CACHE_KERNEL_NAME,
      fcHeight * fcWidth / (numFCRowPipes * numFCColPipes));
    ei.setTicks(MULTI_PUMPED_DOT_PRODUCT_KERNEL_NAME,
      fcHeight * fcWidth / (numFCRowPipes * numFCColPipes) * numMPDPFactor);
    ei.setTicks(FC_POST_PROCESS_KERNEL_NAME,
      fcHeight * fcWidth / (numFCRowPipes * numFCColPipes));
    ei.setTicks(POOL_KERNEL_NAME,
      poolHeight * poolWidth * paddedNumFilterCycles);
  }

  private void setScalarOfEngineInterface(EngineInterface ei) {
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_HEIGHT_INP_NAME,
      height);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_WIDTH_INP_NAME,
      width);
    // ei.setScalar(
    //   CONV_CACHE_KERNEL_NAME,
    //   ConvolutionLayerCacheKernel.SCALAR_NUM_CHANNELS_INP_NAME,
    //   numChannels);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_NUM_FILTERS_INP_NAME,
      numFilters);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_KERNEL_SIZE_INP_NAME,
      kernelSize);

    ei.setScalar(
      CONV_POST_PROCESS_KERNEL_NAME,
      ConvolutionLayerPostProcessKernel.SCALAR_HEIGHT_INP_NAME,
      height);
    ei.setScalar(
      CONV_POST_PROCESS_KERNEL_NAME,
      ConvolutionLayerPostProcessKernel.SCALAR_WIDTH_INP_NAME,
      width);
    ei.setScalar(
      CONV_POST_PROCESS_KERNEL_NAME,
      ConvolutionLayerPostProcessKernel.SCALAR_NUM_CHANNELS_INP_NAME,
      numChannels);
    ei.setScalar(
      CONV_POST_PROCESS_KERNEL_NAME,
      ConvolutionLayerPostProcessKernel.SCALAR_NUM_FILTERS_INP_NAME,
      numFilters);
    ei.setScalar(
      CONV_POST_PROCESS_KERNEL_NAME,
      ConvolutionLayerPostProcessKernel.SCALAR_KERNEL_SIZE_INP_NAME,
      kernelSize);
    
    ei.setScalar(
      MULTI_PUMPED_CONVOLVE_KERNEL_NAME,
      MultiPumpedConvolveKernel.SCALAR_KERNEL_SIZE_NAME,
      kernelSize);

    ei.setScalar(
      FC_CACHE_KERNEL_NAME,
      FullyConnectedLayerCacheKernel.SCALAR_HEIGHT_NAME,
      fcHeight);
    ei.setScalar(
      FC_CACHE_KERNEL_NAME,
      FullyConnectedLayerCacheKernel.SCALAR_WIDTH_NAME,
      fcWidth);

    // ei.setScalar(
    //   FC_POST_PROCESS_KERNEL_NAME,
    //   FullyConnectedLayerPostProcessKernel.SCALAR_HEIGHT_NAME,
    //   fcHeight);
    ei.setScalar(
      FC_POST_PROCESS_KERNEL_NAME,
      FullyConnectedLayerPostProcessKernel.SCALAR_WIDTH_NAME,
      fcWidth);

    ei.setScalar(
      POOL_KERNEL_NAME,
      PoolingLayerKernel.SCALAR_HEIGHT,
      poolHeight);
    ei.setScalar(
      POOL_KERNEL_NAME,
      PoolingLayerKernel.SCALAR_WIDTH,
      poolWidth);
  }

  private EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();

    zero = ei.addConstant(0);

    addConvParamsToEngineInterface(ei);

    addFCParamsToEngineInterface(ei);

    setTicksOfEngineInterface(ei);

    setScalarOfEngineInterface(ei);

    InterfaceParam burstSize = ei.addConstant(384);
    InterfaceParam inpSize
      = height * width * numChannels;
    InterfaceParam wgtSize
      = kernelSize * kernelSize * numChannels * numFilters;
    InterfaceParam outSize
      = poolHeight * poolWidth * paddedNumFilters
      / (poolStride * poolStride);

    InterfaceParam burstAlignedInpSize
      = burstAlignedSize(inpSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedWgtSize
      = burstAlignedSize(wgtSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedOutSize
      = burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();

    ei.setTicks(PADDING_KERNEL_NAME,
      burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize));
    ei.setScalar(
      PADDING_KERNEL_NAME,
      PaddingKernel.SCALAR_NUM_INP,
      outSize);
    ei.setScalar(
      PADDING_KERNEL_NAME,
      PaddingKernel.SCALAR_TOTAL_CYCLES,
      burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize));

    InterfaceParam fcInpSize
      = fcWidth;
    InterfaceParam fcWgtSize
      = fcHeight * fcWidth;
    InterfaceParam fcOutSize
      = fcHeight;

    InterfaceParam burstAlignedFCInpSize
      = burstAlignedSize(fcInpSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedFCWgtSize
      = burstAlignedSize(fcWgtSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedFCOutSize
      = burstAlignedSize(fcOutSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();

    ei.setTicks(PADDING_KERNEL_FC_NAME,
      burstAlignedSize(fcOutSize, CPUTypes.UINT32.sizeInBytes(), burstSize));
    ei.setScalar(
      PADDING_KERNEL_FC_NAME,
      PaddingKernel.SCALAR_NUM_INP,
      fcOutSize);
    ei.setScalar(
      PADDING_KERNEL_FC_NAME,
      PaddingKernel.SCALAR_TOTAL_CYCLES,
      burstAlignedFCOutSize);

    ei.setLMemLinear(
      ConvolutionLayerCacheKernel.INP_NAME,
      baseAddr,
      burstAlignedInpSize);
    baseAddr += burstAlignedInpSize;

    ei.setLMemLinear(ConvolutionLayerCacheKernel.WGT_NAME,
      baseAddr,
      burstAlignedWgtSize);
    baseAddr += burstAlignedWgtSize;

    ei.setLMemLinear(PaddingKernel.OUT_NAME + "_CONV",
      baseAddr,
      burstAlignedOutSize);
    baseAddr += burstAlignedOutSize;

    ei.setLMemLinear(
      FullyConnectedLayerCacheKernel.INP_NAME,
      baseAddr,
      burstAlignedFCInpSize);
    baseAddr += burstAlignedFCInpSize;

    ei.setLMemLinear(FullyConnectedLayerCacheKernel.WGT_NAME,
      baseAddr,
      burstAlignedFCWgtSize);
    baseAddr += burstAlignedFCWgtSize;

    ei.setLMemLinear(PaddingKernel.OUT_NAME + "_FC",
      baseAddr,
      burstAlignedOutSize);
    baseAddr += burstAlignedFCOutSize;

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  private InterfaceParam burstAlignedSize(
    InterfaceParam num,
    int size,
    InterfaceParam burstSize
  ) {
    InterfaceParam length = num * size;
    InterfaceParam burstAlignedLength
      = InterfaceMath.ceil(length.cast(CPUTypes.FLOAT) / burstSize.cast(CPUTypes.FLOAT));
    return burstAlignedLength.cast(CPUTypes.UINT32) * burstSize / size;
  }

  public static void main(String [] args) {
    MaxDeepEngineParameters params = new MaxDeepEngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(manager.interfaceDefault());
    // ManagerUtils.setDRAMMaxDeviceFrequency(manager, params);
    // ManagerUtils.setFullBuild(manager, BuildConfig.Effort.HIGH, 4, 4);

    manager.build();
  }
}
