package maxdeep;

// import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  private static final String MAXDEEP_KERNEL_NAME
    = "MaxDeepKernel";
  private static final String MULTI_PUMPED_CONVOLVE_KERNEL_NAME
    = "MultiPumpedConvolveKernel";
  
  private static final String DEFAULT_KERNEL_CLK = "DefaultKernelClock";
  private static final String MULTI_PUMPED_KERNEL_CLK = "MultiPumpedKernelClock";

  private final int K;
  private final int N;
  private final int C;
  private final int freq;
  protected LMemInterface iface;

  public MaxDeepManager(MaxDeepEngineParameters params) {
    super(params);

    K = params.getKernelSize();
    N = params.getNumPipes();
    C = params.getMultiPumpingFactor();
    freq = params.getFreq();

    addMaxFileConstant("kernelSize", K);
    addMaxFileConstant("numPipes", N);
    addMaxFileConstant("freq", freq);
    addMaxFileConstant("multiPumpingFactor", C);

    KernelBlock k = addKernel(
        new MultiPumpedConvolveKernel(
          makeKernelParameters(MULTI_PUMPED_CONVOLVE_KERNEL_NAME),
          N, K, C));

    iface = addLMemInterface();

    ManagerUtils.addLinearStreamFromLMemToKernel(iface, k, MultiPumpedConvolveKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, k, MultiPumpedConvolveKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, k, MultiPumpedConvolveKernel.OUT_NAME);

    config.setDefaultStreamClockFrequency(freq);
    ManagerClock clock =
      generateStreamClock(DEFAULT_KERNEL_CLK, freq);
    ManagerClock clockForMPC =
      generateStreamClock(MULTI_PUMPED_KERNEL_CLK, freq * C);
    k.setClock(clockForMPC);
  }

  private EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();
    InterfaceParam size = ei.addParam("dataSize", CPUTypes.INT32);
    ei.setTicks(MULTI_PUMPED_CONVOLVE_KERNEL_NAME, size / (K * K * N / C));

    InterfaceParam zero = ei.addConstant(0);
    InterfaceParam inpSize = size * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam wgtSize = size * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam outSize = size / (K * K) * CPUTypes.UINT32.sizeInBytes();

    ei.setLMemLinear(MultiPumpedConvolveKernel.INP_NAME, zero, inpSize);
    ei.setLMemLinear(MultiPumpedConvolveKernel.WGT_NAME, inpSize, wgtSize);
    ei.setLMemLinear(MultiPumpedConvolveKernel.OUT_NAME, inpSize + wgtSize, outSize);

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  public static void main(String [] args) {
    MaxDeepEngineParameters params = new MaxDeepEngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(manager.interfaceDefault());
    manager.build();
  }
}
