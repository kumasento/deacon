package maxdeep;

// import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  // private static final String MAXDEEP_KERNEL_NAME
  //   = "MaxDeepKernel";
  private static final String MULTI_PUMPED_CONVOLVE_KERNEL_NAME
    = "MultiPumpedConvolveKernel";
  private static final String CONV_CACHE_KERNEL_NAME
    = "ConvolutionLayerCacheKernel";
  private static final String PADDING_KERNEL_NAME
    = "PaddingKernel";
  
  private static final String DEFAULT_KERNEL_CLK = "DefaultKernelClock";
  private static final String MULTI_PUMPED_KERNEL_CLK = "MultiPumpedKernelClock";

  private final int N;
  private final int C;
  private final int freq;
  private final int maxConvHeight;
  private final int maxConvWidth;
  private final int maxConvNumChannels;
  private final int maxConvNumFilters;
  private final int maxConvKernelSize;

  protected LMemInterface iface;

  public MaxDeepManager(MaxDeepEngineParameters params) {
    super(params);

    N                  = params.getNumPipes();
    C                  = params.getMultiPumpingFactor();
    freq               = params.getFreq();
    maxConvHeight      = params.getMaxConvHeight();
    maxConvWidth       = params.getMaxConvWidth();
    maxConvNumChannels = params.getMaxConvNumChannels();
    maxConvNumFilters  = params.getMaxConvNumFilters();
    maxConvKernelSize  = params.getMaxConvKernelSize();

    addMaxFileConstant("numPipes",           N);
    addMaxFileConstant("freq",               freq);
    addMaxFileConstant("multiPumpingFactor", C);
    addMaxFileConstant("maxConvHeight",      maxConvHeight);
    addMaxFileConstant("maxConvWidth",       maxConvWidth);
    addMaxFileConstant("maxConvNumChannels", maxConvNumChannels);
    addMaxFileConstant("maxConvNumFilters",  maxConvNumFilters);
    addMaxFileConstant("maxConvKernelSize",  maxConvKernelSize);

    KernelBlock mpc = addKernel(
        new MultiPumpedConvolveKernel(
          makeKernelParameters(MULTI_PUMPED_CONVOLVE_KERNEL_NAME),
          1, maxConvKernelSize, 1, params.getDbg()));
    KernelBlock cache = addKernel(
        new ConvolutionLayerCacheKernel(
          makeKernelParameters(CONV_CACHE_KERNEL_NAME),
          maxConvHeight,
          maxConvWidth,
          maxConvNumChannels,
          maxConvNumFilters,
          maxConvKernelSize,
          params.getDbg()));
    KernelBlock paddingKernel = addKernel(
      new PaddingKernel(
        makeKernelParameters(PADDING_KERNEL_NAME)));

    iface = addLMemInterface();

    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, cache, ConvolutionLayerCacheKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, paddingKernel, PaddingKernel.OUT_NAME);

    mpc.getInput(MultiPumpedConvolveKernel.INP_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_INP_NAME);
    mpc.getInput(MultiPumpedConvolveKernel.WGT_NAME)
      <== cache.getOutput(ConvolutionLayerCacheKernel.OUT_WGT_NAME);
    paddingKernel.getInput(PaddingKernel.INP_NAME)
      <== mpc.getOutput(MultiPumpedConvolveKernel.OUT_NAME);

    config.setDefaultStreamClockFrequency(freq);
    ManagerClock clock =
      generateStreamClock(DEFAULT_KERNEL_CLK, freq);
    cache.setClock(clock);
    paddingKernel.setClock(clock);

    ManagerClock clockForMPC =
      generateStreamClock(MULTI_PUMPED_KERNEL_CLK, freq * C);
    mpc.setClock(clockForMPC);
  }

  private EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();

    InterfaceParam zero
      = ei.addConstant(0);
    InterfaceParam kernelSize
      = ei.addParam(
          "conv_kernel_size",
          CPUTypes.UINT32,
          "The kernel size of the current convolution layer computation"
        );
    InterfaceParam height 
      = ei.addParam(
          "conv_height",
          CPUTypes.UINT32,
          "The height of the current convolution layer computation"
        );
    InterfaceParam width 
      = ei.addParam(
          "conv_width",
          CPUTypes.UINT32,
          "The width of the current convolution layer computation"
        );
    InterfaceParam numChannels 
      = ei.addParam(
          "conv_num_channels",
          CPUTypes.UINT32,
          "The num of channels of the current convolution layer computation"
        );
    InterfaceParam numFilters 
      = ei.addParam(
          "conv_num_filters",
          CPUTypes.UINT32,
          "The number of filters of the current convolution layer computation"
        );
    InterfaceParam numOutput
      = ((height - kernelSize + 1) *
         (width - kernelSize + 1) *
         numFilters
        );

    ei.setTicks(CONV_CACHE_KERNEL_NAME,
        height * width * numChannels * numFilters);
    ei.setTicks(MULTI_PUMPED_CONVOLVE_KERNEL_NAME,
        numOutput * numChannels);

    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_HEIGHT_INP_NAME,
      height);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_WIDTH_INP_NAME,
      width);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_NUM_CHANNELS_INP_NAME,
      numChannels);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_NUM_FILTERS_INP_NAME,
      numFilters);
    ei.setScalar(
      CONV_CACHE_KERNEL_NAME,
      ConvolutionLayerCacheKernel.SCALAR_KERNEL_SIZE_INP_NAME,
      kernelSize);
    ei.setScalar(
      MULTI_PUMPED_CONVOLVE_KERNEL_NAME,
      MultiPumpedConvolveKernel.SCALAR_KERNEL_SIZE_NAME,
      kernelSize);

    InterfaceParam burstSize = ei.addConstant(384);
    InterfaceParam inpSize
      = height * width * numChannels;
    InterfaceParam wgtSize
      = kernelSize * kernelSize * numChannels * numFilters;
    InterfaceParam outSize
      = numOutput * numChannels;

    InterfaceParam burstAlignedInpSize
      = burstAlignedSize(inpSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedWgtSize
      = burstAlignedSize(wgtSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam burstAlignedOutSize
      = burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize)
        * CPUTypes.UINT32.sizeInBytes();

    ei.setTicks(PADDING_KERNEL_NAME,
      burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize));
    ei.setScalar(
      PADDING_KERNEL_NAME,
      PaddingKernel.SCALAR_NUM_INP,
      outSize);
    ei.setScalar(
      PADDING_KERNEL_NAME,
      PaddingKernel.SCALAR_TOTAL_CYCLES,
      burstAlignedSize(outSize, CPUTypes.UINT32.sizeInBytes(), burstSize));

    ei.setLMemLinear(
      ConvolutionLayerCacheKernel.INP_NAME,
      zero,
      burstAlignedInpSize);
    ei.setLMemLinear(ConvolutionLayerCacheKernel.WGT_NAME,
      burstAlignedInpSize,
      burstAlignedWgtSize);
    ei.setLMemLinear(PaddingKernel.OUT_NAME,
      burstAlignedInpSize + burstAlignedWgtSize,
      burstAlignedOutSize);

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  private InterfaceParam burstAlignedSize(
    InterfaceParam num,
    int size,
    InterfaceParam burstSize
  ) {
    InterfaceParam length = num * size;
    InterfaceParam burstAlignedLength
      = InterfaceMath.ceil(length.cast(CPUTypes.FLOAT) / burstSize.cast(CPUTypes.FLOAT));
    return burstAlignedLength.cast(CPUTypes.UINT32) * burstSize / size;
  }

  public static void main(String [] args) {
    MaxDeepEngineParameters params = new MaxDeepEngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(manager.interfaceDefault());
    manager.build();
  }
}
