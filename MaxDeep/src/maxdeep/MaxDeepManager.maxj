package maxdeep;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  private static final String MAXDEEP_KERNEL_NAME = "MaxDeepKernel";
  private static final int K = 2;
  private static final int N = 2;
  protected LMemInterface iface;

  public MaxDeepManager(EngineParameters params) {
    super(params);

    KernelBlock k = addKernel(
        new MaxDeepKernel(makeKernelParameters(MAXDEEP_KERNEL_NAME), N, K));

    iface = addLMemInterface();
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, k, MaxDeepKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(iface, k, MaxDeepKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(iface, k, MaxDeepKernel.OUT_NAME);
  }

  private static EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();
    InterfaceParam size = ei.addParam("dataSize", CPUTypes.INT32);
    ei.setTicks(MAXDEEP_KERNEL_NAME, size / (K * K * N));

    InterfaceParam zero = ei.addConstant(0);
    InterfaceParam inpSize = size * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam wgtSize = size * CPUTypes.UINT32.sizeInBytes();
    InterfaceParam outSize = size / (K * K) * CPUTypes.UINT32.sizeInBytes();
    ei.setLMemLinear(MaxDeepKernel.INP_NAME, zero, inpSize);
    ei.setLMemLinear(MaxDeepKernel.WGT_NAME, inpSize, wgtSize);
    ei.setLMemLinear(MaxDeepKernel.OUT_NAME, inpSize + wgtSize, outSize);

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  public static void main(String [] args) {
    EngineParameters params = new EngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(interfaceDefault());
    manager.build();
  }
}
