package com.custom_computing_ic.maxdeep.kernel.conv2d;

import com.custom_computing_ic.maxdeep.kernel.conv2d.lib.Conv2DKernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class Conv2DKernelTest {

  private class TestKernel extends Kernel {
    TestKernel(KernelParameters params, ConvLayerParameters convParams) {
      super(params);

      DFEType scalarT = dfeUInt(8);
      Conv2DKernel conv2d = new Conv2DKernel(this, convParams, scalarT);
      
      DFEVector<DFEVar> ifmap = io.input("ifmap", conv2d.getIfmapT());
      DFEVector<DFEVar> coeff = io.input("coeff", conv2d.getCoeffT());
      
      conv2d.setInputs(ifmap, coeff);
      DFEVector<DFEVar> ofmap = conv2d.getOfmap();
      
      io.output("ofmap", conv2d.getOfmapT()) <== ofmap;
    }
  }

  private class TestData {
    private final ConvLayerParameters params;
    
    public Bits[] ifmap;
    public Bits[] coeff;
    public Bits[] ofmap;

    TestData(ConvLayerParameters params) {
      this.params = params;
      
    }

    public long getNumCycles() {
      long totalCycles = params.C * params.F * (params.H - params.K + 1)
          * (params.W - params.K + 1);
      return totalCycles / (params.PC * params.PF * params.PK);
    }
  }

  private void test(int PC, int PF, int PK) {
    ConvLayerParameters convParams = new ConvLayerParameters.Builder(
        10, 10, 4, 4, 3).PC(PC).PF(PF).PK(PK).build();
    SimulationManager mgr = new SimulationManager(String.format(
        "Conv2DTest_%d_%d_%d", PC, PF, PK));
    TestKernel knl = new TestKernel(mgr.makeKernelParameters(), convParams);
    TestData data = new TestData(convParams);
    
    mgr.setKernel(knl);
    mgr.setKernelCycles(data.getNumCycles());
  }
}
