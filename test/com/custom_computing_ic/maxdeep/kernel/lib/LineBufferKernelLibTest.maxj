/**
 * 
 */
package com.custom_computing_ic.maxdeep.kernel.lib;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;

/**
 * @author Ruizhe Zhao
 * @since 16/06/2017
 */
public class LineBufferKernelLibTest {

  private class LineBufferTestKernel extends Kernel {
    public LineBufferTestKernel(KernelParameters parameters, int maxHeight,
        int maxWidth, int numPipes) {
      super(parameters);

      DFEType type = dfeFloat(11, 53);
      DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(type, numPipes);
      DFEVectorType<DFEVar> outVecType = new DFEVectorType<DFEVar>(type,
          maxHeight * numPipes);

      DFEVector<DFEVar> inp = io.input("inp", vecType);

      DFEVar height = io.scalarInput("height", dfeInt(32));
      DFEVar width = io.scalarInput("width", dfeInt(32));
      DFEVar capacity = io.scalarInput("capacity", dfeInt(32));

      LineBufferKernelLib knl = new LineBufferKernelLib(this, maxHeight,
          maxWidth, numPipes, type);
      knl.setInput(inp);
      knl.setHeight(height);
      knl.setWidth(width);
      knl.setCapacity(capacity);

      DFEVector<DFEVar> out = knl.getOutput();
      io.output("output", out, outVecType);
    }
  }

  private class LineBufferTestData {
    final double[] input;
    final long     expected[];

    public LineBufferTestData(int height, int width) {
      int capacity = height * width;

      input = new double[capacity];
      expected = new long[capacity];
      for (int i = 0; i < capacity; i++)
        input[i] = i;
    }
  }

  @Test
  public void testSimple() {
    test(3, 5, 1);
  }

  private void test(int height, int width, int numPipes) {
    SimulationManager mgr = new SimulationManager("LineBufferKernelLibTest");
    LineBufferTestKernel knl = new LineBufferTestKernel(
        mgr.makeKernelParameters(), height, width, numPipes);
    LineBufferTestData data = new LineBufferTestData(height, width);

    mgr.setKernel(knl);
    mgr.setKernelCycles(width * height);
    mgr.setScalarInput("height", height);
    mgr.setScalarInput("width", width);
    mgr.setScalarInput("capacity", height * width);
    mgr.setInputData("inp", data.input);
    mgr.runTest();
  }
}
