package conv;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

/**
 * 
 */

/**
 * @author Ruizhe Zhao
 * 
 */
public class ConvLayerManager extends CustomManager {

  public static final int H           = 32;
  public static final int W           = 32;
  public static final int C           = 32;
  public static final int F           = 32;
  public static final int K           = 3;
  private final String    KERNEL_NAME = "Conv2DWrapKernel";

  public ConvLayerManager(ConvLayerEngineParameters params,
      ConvLayerParameters convParams) {
    super(params);

    config.setAllowNonMultipleTransitions(true);

    KernelBlock knl = addKernel(new ConvLayerWrapKernel(
        makeKernelParameters(KERNEL_NAME), convParams));
    knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
        addStreamFromCPU("ifmap"));
    knl.getInput(ConvLayerWrapKernel.COEFF_NAME).connect(
        addStreamFromCPU("coeff"));
    addStreamToCPU("ofmap").connect(
        knl.getOutput(ConvLayerWrapKernel.OFMAP_NAME));
  }

  // public EngineInterface interfaceDefault(ConvLayerParameters convParams) {
  // EngineInterface ei = new EngineInterface();
  //
  // Conv2DKernelTest.TestData data = new Conv2DKernelTest.TestData(convParams);
  // ei.setTicks(KERNEL_NAME, data.getNumCycles());
  // ei.setStream(
  // "ifmap",
  // CPUTypes.UINT8,
  // CPUTypes.UINT8.sizeInBytes() * data.getNumCycles() * data.getIfmapWidth());
  // ei.setStream(
  // "coeff",
  // CPUTypes.UINT8,
  // CPUTypes.UINT8.sizeInBytes() * data.getNumCycles() * data.getCoeffWidth());
  // ei.setStream(
  // "ofmap",
  // CPUTypes.UINT8,
  // CPUTypes.UINT8.sizeInBytes() * data.getNumCycles() * data.getOfmapWidth());
  //
  // return ei;
  // }

  public static void main(String[] args) {
    ConvLayerEngineParameters params = new ConvLayerEngineParameters(args);
    ConvLayerParameters convParams = new ConvLayerParameters.Builder(H, W, C,
        F, K)
        .PC(params.getPC()).PF(params.getPF()).PK(params.getPK())
        .BW(params.getBitWidth()).build();
    ConvLayerManager mgr = new ConvLayerManager(params, convParams);
    // mgr.createSlicInterface(mgr.interfaceDefault(convParams));
    BuildConfig buildConfig = mgr.getBuildConfig();
    buildConfig.setBuildEffort(Effort.HIGH);
    buildConfig.setMPPRCostTableSearchRange(1, 4);
    buildConfig.setMPPRParallelism(4);
    mgr.build();
  }

}
