package conv_two_layers;

import java.util.ArrayList;
import java.util.List;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters.CompSeq;
import com.custom_computing_ic.maxdeep.manager.ConvLayerManagerUtils;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

/**
 * 
 */

/**
 * @author Ruizhe Zhao
 * 
 */
public class ConvTwoLayersManager extends CustomManager {

  public ConvTwoLayersManager(ConvTwoLayersEngineParameters params,
      List<ConvLayerParameters> cps) {
    super(params);

    getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
    config.setAllowNonMultipleTransitions(true);
    config.setDefaultStreamClockFrequency(params.getFreq());

    ConvLayerManagerUtils.createKernelBlocks(this, cps, params.getUseDRAM());
    ConvLayerManagerUtils.setupConstants(this, cps, params);
  }

  public EngineInterface interfaceDefault(List<ConvLayerParameters> cps,
      ConvTwoLayersEngineParameters ep) {
    EngineInterface ei = new EngineInterface();

    InterfaceParam batchSize = ei.addParam("batch_size", CPUTypes.UINT64);

    ConvLayerManagerUtils.setupStreams(ei, cps, batchSize, ep.getUseDRAM());

    return ei;
  }

  @SuppressWarnings("deprecation")
  public static void main(String[] args) {
    ConvTwoLayersEngineParameters ep = new ConvTwoLayersEngineParameters(args);
    int H = ep.getH();
    int W = ep.getW();
    int C = ep.getC();
    int F = ep.getF();
    int K = ep.getK();

    List<ConvLayerParameters> cps = new ArrayList<ConvLayerParameters>();

    /* resolve the computation sequence */
    CompSeq seq0 = CompSeq.values()[ep.getSeq()];
    CompSeq seq1 =
        (seq0 == CompSeq.CHANNEL_MAJOR)
            ? CompSeq.FILTER_MAJOR
            : CompSeq.CHANNEL_MAJOR;

    cps.add(
        0,
        new ConvLayerParameters.Builder(H, W, C, F, K)
            .BW(ep.getBitWidth())
            .name("conv0")
            .PC(ep.getPC())
            .PF(ep.getPF())
            .PK(ep.getPK())
            .seq(seq0)
            .build());
    cps.add(1, new ConvLayerParameters.Builder(H - K + 1, W - K + 1, F, F, K)
        .BW(ep.getBitWidth())
        .seq(seq1)
        .PC(ep.getPF())
        .PF(ep.getPF())
        .PK(ep.getPK())
        .name("conv1")
        .build());

    ConvTwoLayersManager mgr = new ConvTwoLayersManager(ep, cps);

    mgr.createSLiCinterface(mgr.interfaceDefault(cps, ep));

    BuildConfig buildConfig = mgr.getBuildConfig();
    buildConfig.setBuildEffort(Effort.HIGH);
    buildConfig.setMPPRCostTableSearchRange(1, 4);
    buildConfig.setMPPRParallelism(4);
    mgr.build();
  }

}
