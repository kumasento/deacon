package conv_twolayers;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerKernel;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration.OptimizationOptions.DSPMulAddChainBehaviour;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

/**
 * Kernel for generating Conv2DKernel different parameters
 * 
 * @author rz3515
 * 
 */
public class ConvLayerWrapKernel extends Kernel {

  public static final String        IFMAP_NAME = "ifmap";
  public static final String        COEFF_NAME = "coeff";
  public static final String        OFMAP_NAME = "ofmap";

  private final ConvLayerParameters cp;

  public ConvLayerWrapKernel(KernelParameters params,
      ConvLayerParameters convParams) {
    super(params);

    // TODO: remove muladd optimisation for now
    KernelConfiguration config = getKernelConfig();
    config.optimization
        .setDSPMulAddChainBehavior(DSPMulAddChainBehaviour.IGNORE);

    this.cp = convParams;

    DFEType scalarT = dfeFix(0, convParams.BW, SignMode.UNSIGNED);

    ConvLayerKernel conv = new ConvLayerKernel(getKernel(), cp, scalarT);
    DFEVector<DFEVar> ifmap = io.input(
        IFMAP_NAME, conv.getIfmapVecT(), conv.getIfmapEn());
    DFEVector<DFEVar> coeff = io.input(
        COEFF_NAME, conv.getCoeffVecT(), conv.getCoeffEn());
    conv.setInputs(ifmap, coeff);
    io.output(OFMAP_NAME, conv.getOfmapVecT(), conv.getOfmapEn()).connect(
        conv.getOfmap());
  }
}
