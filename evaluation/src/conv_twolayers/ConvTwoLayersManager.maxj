package conv_twolayers;

import java.util.ArrayList;
import java.util.List;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.custom_computing_ic.maxdeep.manager.ManagerUtils;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;

/**
 * 
 */

/**
 * @author Ruizhe Zhao
 * 
 */
public class ConvTwoLayersManager extends CustomManager {

  public static final int H = 6;
  public static final int W = 6;
  public static final int C = 2;
  public static final int F = 2;
  public static final int K = 3;

  public ConvTwoLayersManager(ConvTwoLayersEngineParameters params,
      List<ConvLayerParameters> cps) {
    super(params);

    getCurrentKernelConfig().debug.setEnableLatencyAnnotation(true);
    config.setAllowNonMultipleTransitions(true);

    ManagerUtils.createKernelBlocks(this, cps);
    ManagerUtils.setupConstants(this, cps);
  }

  public EngineInterface interfaceDefault(List<ConvLayerParameters> cps) {
    EngineInterface ei = new EngineInterface();

    ManagerUtils.setupStreams(ei, cps);
    ManagerUtils.setupKernelTicks(ei, cps);

    return ei;
  }

  public static void main(String[] args) {
    ConvTwoLayersEngineParameters params = new ConvTwoLayersEngineParameters(
        args);
    List<ConvLayerParameters> cps = new ArrayList<ConvLayerParameters>();
    cps.add(
        0,
        new ConvLayerParameters.Builder(H, W, C, F, K)
            .BW(params.getBitWidth()).name("conv0").build());
    cps.add(1, new ConvLayerParameters.Builder(H - K + 1, W - K + 1, F, F, K)
        .BW(params.getBitWidth()).name("conv1").build());

    ConvTwoLayersManager mgr = new ConvTwoLayersManager(params, cps);

    mgr.createSlicInterface(mgr.interfaceDefault(cps));

    BuildConfig buildConfig = mgr.getBuildConfig();
    buildConfig.setBuildEffort(Effort.HIGH);
    buildConfig.setMPPRCostTableSearchRange(1, 4);
    buildConfig.setMPPRParallelism(4);
    mgr.build();
  }

}
