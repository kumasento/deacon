Running maxjc ...
Using maxj batch compiler.
jar: /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/ecj.jar
MAXAPPJCP=.:../../../src:../../../test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar \
	MAXAPPPKG=mobilenet_v1 MAXSOURCEDIRS=../../src:../../../src \
	maxJavaRun -v -m 8192 MobilenetV1Manager \
	DFEModel=MAIA maxFileName=MobilenetV1 target='DFE' enableMPCX=false \
	FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/build/mobilenet_v1/data/data-mobilenet-v1_FREQ-300.txt 
]0; maxJavaRun: MobilenetV1Manager DFEModel=MAIA maxFileName=MobilenetV1 target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/build/mobilenet_v1/data/data-mobilenet-v1_FREQ-300.txt maxJavaRun : Execute Java program with Maxeler environment

Input classpath     : 
MaxCompiler JAR     : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar
                      (from MAXCOMPILERDIR)
MAXAPPJCP           : .:../../../src:../../../test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
MAXSOURCEDIRS       : ../../src:../../../src

.maxJavaRun present : No
Custom Param file   : None
MAXAPPPKG           : mobilenet_v1
MAXJVMMEM           : 
MAXEMMAJCP          : 
MAXEMMARUN          : 
JACOCO_AGENT        : 
JACOCO_AGENT_OPTIONS: 

----------------------------------------------------------
Java class to run   : mobilenet_v1.MobilenetV1Manager
Class arguments     : DFEModel=MAIA maxFileName=MobilenetV1 target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/build/mobilenet_v1/data/data-mobilenet-v1_FREQ-300.txt
Execution classpath : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar:
                      .:
                      ../../../src:
                      ../../../test:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
JVM memory limit    : 8192 MB
----------------------------------------------------------

Sun 15:35: MaxCompiler version: 2021.1
Sun 15:35: Build "MobilenetV1" start time: Sun Dec 19 15:35:41 GMT 2021
Sun 15:35: Main build process running as user rz3515 on host cccad5.doc.ic.ac.uk
Sun 15:35: Build location: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1_MAIA_DFE_FREQ_300
Sun 15:35: Detailed build log available in "_build.log"
Sun 15:35: 
Sun 15:35: ENGINE BUILD PARAMETERS
Sun 15:35: 	              Build name: MobilenetV1_MAIA_DFE_FREQ_300                                                                           
Sun 15:35: 	             maxFileName: MobilenetV1                                                                                             
Sun 15:35: 	                  target: DFE                                                                                                     
Sun 15:35: 	                DFEModel: MAIA                                                                                                    
Sun 15:35: 	              enableMPCX: false                                                                                                   
Sun 15:35: 	                bitWidth: 32                                                                                                      
Sun 15:35: 	                     WBW: 32                                                                                                      
Sun 15:35: 	                   DTYPE: fixed                                                                                                   
Sun 15:35: 	           NUM_FRAC_BITS: 8                                                                                                       
Sun 15:35: 	                      PF: 1                                                                                                       
Sun 15:35: 	                      PC: 1                                                                                                       
Sun 15:35: 	                      PK: 1                                                                                                       
Sun 15:35: 	                       H: 1                                                                                                       
Sun 15:35: 	                       W: 1                                                                                                       
Sun 15:35: 	                       C: 1                                                                                                       
Sun 15:35: 	                       F: 1                                                                                                       
Sun 15:35: 	                       K: 1                                                                                                       
Sun 15:35: 	                     PAD: 0                                                                                                       
Sun 15:35: 	                       S: 1                                                                                                       
Sun 15:35: 	                     SEQ: 0                                                                                                       
Sun 15:35: 	                    FREQ: 300                                                                                                     
Sun 15:35: 	                USE_DRAM: false                                                                                                   
Sun 15:35: 	                 USE_BNN: false                                                                                                   
Sun 15:35: 	            USE_WINOGRAD: false                                                                                                   
Sun 15:35: 	WINOGRAD_WEIGHTS_OFFLINE: false                                                                                                   
Sun 15:35: 	   NUM_COEFF_FIFO_SPLITS: 1                                                                                                       
Sun 15:35: 	                   DEBUG: false                                                                                                   
Sun 15:35: 	           COEFF_ON_CHIP: false                                                                                                   
Sun 15:35: 	              INIT_COEFF: false                                                                                                   
Sun 15:35: 	              COEFF_FILE: /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/build/mobilenet_v1/data/data-mobilenet-v1_FREQ-300.txt
Sun 15:37: Generating kernel conv0 ...
Sun 15:37: Instantiating kernel "conv0"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 224, output height = 224, pad = 1
Sun 15:37: Counter H = 226 W = 226
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Read for key = conv0
Sun 15:37: Ifmap buffer configuration 65536 x 1
Sun 15:37: loop = false
Sun 15:37: Building line buffer for "conv0" ...
Sun 15:37: Line buffer shape 3 x 224, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 226 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv0" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 524288 addr_bits =    19
Sun 15:37: Compiling kernel "conv0"
Sun 15:37: 
Sun 15:37: Generating kernel conv1 ...
Sun 15:37: Instantiating kernel "conv1"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 112, output height = 112, pad = 1
Sun 15:37: Counter H = 114 W = 114
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv1" ...
Sun 15:37: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 114 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv1_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 16384 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv1_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 1048576 addr_bits =    20
Sun 15:37: Depthwise coeff ROM depth = 32
Sun 15:37: Pointwise coeff ROM depth = 2048
Sun 15:37: Read for key = conv1_dw
Sun 15:37: Read for key = conv1_pw
Sun 15:37: Compiling kernel "conv1"
Sun 15:37: 
Sun 15:37: Generating kernel conv2 ...
Sun 15:37: Instantiating kernel "conv2"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 112, output height = 112, pad = 1
Sun 15:37: Counter H = 114 W = 114
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv2" ...
Sun 15:37: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 114 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv2_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 4096 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv2_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 524288 addr_bits =    19
Sun 15:37: Depthwise coeff ROM depth = 64
Sun 15:37: Pointwise coeff ROM depth = 8192
Sun 15:37: Read for key = conv2_dw
Sun 15:37: Read for key = conv2_pw
Sun 15:37: Compiling kernel "conv2"
Sun 15:37: 
Sun 15:37: Generating kernel conv3 ...
Sun 15:37: Instantiating kernel "conv3"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 56, output height = 56, pad = 1
Sun 15:37: Counter H = 58 W = 58
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv3" ...
Sun 15:37: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 58 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv3_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 4096 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv3_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 524288 addr_bits =    19
Sun 15:37: Depthwise coeff ROM depth = 128
Sun 15:37: Pointwise coeff ROM depth = 16384
Sun 15:37: Read for key = conv3_dw
Sun 15:37: Read for key = conv3_pw
Sun 15:37: Compiling kernel "conv3"
Sun 15:37: 
Sun 15:37: Generating kernel conv4 ...
Sun 15:37: Instantiating kernel "conv4"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 56, output height = 56, pad = 1
Sun 15:37: Counter H = 58 W = 58
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv4" ...
Sun 15:37: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 58 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv4_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 1024 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv4_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 262144 addr_bits =    18
Sun 15:37: Depthwise coeff ROM depth = 128
Sun 15:37: Pointwise coeff ROM depth = 32768
Sun 15:37: Read for key = conv4_dw
Sun 15:37: Read for key = conv4_pw
Sun 15:37: Compiling kernel "conv4"
Sun 15:37: 
Sun 15:37: Generating kernel conv5 ...
Sun 15:37: Instantiating kernel "conv5"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 28, output height = 28, pad = 1
Sun 15:37: Counter H = 30 W = 30
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv5" ...
Sun 15:37: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 30 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv5_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 1024 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv5_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 262144 addr_bits =    18
Sun 15:37: Depthwise coeff ROM depth = 256
Sun 15:37: Pointwise coeff ROM depth = 65536
Sun 15:37: Read for key = conv5_dw
Sun 15:37: Read for key = conv5_pw
Sun 15:37: Compiling kernel "conv5"
Sun 15:37: 
Sun 15:37: Generating kernel conv6 ...
Sun 15:37: Instantiating kernel "conv6"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 28, output height = 28, pad = 1
Sun 15:37: Counter H = 30 W = 30
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv6" ...
Sun 15:37: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 30 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv6_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv6_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 256
Sun 15:37: Pointwise coeff ROM depth = 131072
Sun 15:37: Read for key = conv6_dw
Sun 15:37: Read for key = conv6_pw
Sun 15:37: Compiling kernel "conv6"
Sun 15:37: 
Sun 15:37: Generating kernel conv7 ...
Sun 15:37: Instantiating kernel "conv7"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv7" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv7_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv7_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv7_dw
Sun 15:37: Read for key = conv7_pw
Sun 15:37: Compiling kernel "conv7"
Sun 15:37: 
Sun 15:37: Generating kernel conv8 ...
Sun 15:37: Instantiating kernel "conv8"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv8" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv8_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv8_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv8_dw
Sun 15:37: Read for key = conv8_pw
Sun 15:37: Compiling kernel "conv8"
Sun 15:37: 
Sun 15:37: Generating kernel conv9 ...
Sun 15:37: Instantiating kernel "conv9"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv9" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv9_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv9_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv9_dw
Sun 15:37: Read for key = conv9_pw
Sun 15:37: Compiling kernel "conv9"
Sun 15:37: 
Sun 15:37: Generating kernel conv10 ...
Sun 15:37: Instantiating kernel "conv10"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv10" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv10_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv10_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv10_dw
Sun 15:37: Read for key = conv10_pw
Sun 15:37: Compiling kernel "conv10"
Sun 15:37: 
Sun 15:37: Generating kernel conv11 ...
Sun 15:37: Instantiating kernel "conv11"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv11" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv11_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 256 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv11_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv11_dw
Sun 15:37: Read for key = conv11_pw
Sun 15:37: Compiling kernel "conv11"
Sun 15:37: 
Sun 15:37: Generating kernel conv12 ...
Sun 15:37: Instantiating kernel "conv12"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 14, output height = 14, pad = 1
Sun 15:37: Counter H = 16 W = 16
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 1 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv12" ...
Sun 15:37: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 16 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv12_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 64 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv12_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 1
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Sun 15:37: Depthwise coeff ROM depth = 512
Sun 15:37: Pointwise coeff ROM depth = 524288
Sun 15:37: Read for key = conv12_dw
Sun 15:37: Read for key = conv12_pw
Sun 15:37: Compiling kernel "conv12"
Sun 15:37: 
Sun 15:37: Generating kernel conv13 ...
Sun 15:37: Instantiating kernel "conv13"
Sun 15:37: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: coeffOnChip = true
Sun 15:37: Input height = 7, output height = 7, pad = 1
Sun 15:37: Counter H = 9 W = 9
Sun 15:37: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 15:37: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Sun 15:37: Building line buffer for "conv13" ...
Sun 15:37: Line buffer shape 3 x 7, produces 1 number of 3 x 3 tiles per cycle
Sun 15:37: Line buffer input vector size: 1, output vector size: 9.
Sun 15:37: Number of separated line buffers: 1
Sun 15:37: Initialising line buffer kernel with 3 x 9 x 1
Sun 15:37: Size of line buffer output: 3
Sun 15:37: Number of line buffer output chunks: 3
Sun 15:37: Connecting outputs from chunk (#000) ...
Sun 15:37: Connecting outputs from chunk (#001) ...
Sun 15:37: Connecting outputs from chunk (#002) ...
Sun 15:37: Building the CORE arithmetic unit for "conv13_dw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 9
Sun 15:37: CORE coefficient vector size: 9
Sun 15:37: CORE ofmap vector size: 1
Sun 15:37: Ifmap buffer configuration 64 x 1
Sun 15:37: loop = false
Sun 15:37: Building the CORE arithmetic unit for "conv13_pw" ...
Sun 15:37: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 15:37: CORE ifmap vector size: 1
Sun 15:37: CORE coefficient vector size: 4
Sun 15:37: CORE ofmap vector size: 4
Sun 15:37: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Sun 15:37: Depthwise coeff ROM depth = 1024
Sun 15:37: Pointwise coeff ROM depth = 262144
Sun 15:37: Read for key = conv13_dw
Sun 15:37: Read for key = conv13_pw
Sun 15:37: Compiling kernel "conv13"
Sun 15:37: 
Sun 15:37: Generating padding kernels for DRAM access
Sun 15:37: Instantiating kernel "ifmap_unpad"
Sun 15:37: Compiling kernel "ifmap_unpad"
Sun 15:37: 
Sun 15:37: Instantiating kernel "ofmap_pad"
Sun 15:37: Compiling kernel "ofmap_pad"
Sun 15:37: 
Sun 15:37: Setting up stream connections for conv0
Sun 15:37: Setting up stream connections for conv1
Sun 15:37: Setting up stream connections for conv2
Sun 15:37: Setting up stream connections for conv3
Sun 15:37: Setting up stream connections for conv4
Sun 15:37: Setting up stream connections for conv5
Sun 15:37: Setting up stream connections for conv6
Sun 15:37: Setting up stream connections for conv7
Sun 15:37: Setting up stream connections for conv8
Sun 15:37: Setting up stream connections for conv9
Sun 15:37: Setting up stream connections for conv10
Sun 15:37: Setting up stream connections for conv11
Sun 15:37: Setting up stream connections for conv12
Sun 15:37: Setting up stream connections for conv13
Sun 15:37: DRAM will be used to build the design
Sun 15:37: Setup streams for kernel "conv0"
Sun 15:37: # cycles:       4903296
Sun 15:37: # ifmap stream: 150528
Sun 15:37: # coeff stream: 864
Sun 15:37: # ofmap stream: 401408
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv1"
Sun 15:37: # cycles:       26615808
Sun 15:37: # ifmap stream: 401408
Sun 15:37: # coeff stream: 18720
Sun 15:37: # ofmap stream: 802816
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv2"
Sun 15:37: # cycles:       106463232
Sun 15:37: # ifmap stream: 802816
Sun 15:37: # coeff stream: 74304
Sun 15:37: # ofmap stream: 401408
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv3"
Sun 15:37: # cycles:       55115776
Sun 15:37: # ifmap stream: 401408
Sun 15:37: # coeff stream: 148608
Sun 15:37: # ofmap stream: 401408
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv4"
Sun 15:37: # cycles:       110231552
Sun 15:37: # ifmap stream: 401408
Sun 15:37: # coeff stream: 296064
Sun 15:37: # ofmap stream: 200704
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv5"
Sun 15:37: # cycles:       58982400
Sun 15:37: # ifmap stream: 200704
Sun 15:37: # coeff stream: 592128
Sun 15:37: # ofmap stream: 200704
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv6"
Sun 15:37: # cycles:       117964800
Sun 15:37: # ifmap stream: 200704
Sun 15:37: # coeff stream: 1181952
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv7"
Sun 15:37: # cycles:       67108864
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 2363904
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv8"
Sun 15:37: # cycles:       67108864
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 2363904
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv9"
Sun 15:37: # cycles:       67108864
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 2363904
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv10"
Sun 15:37: # cycles:       67108864
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 2363904
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv11"
Sun 15:37: # cycles:       67108864
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 2363904
Sun 15:37: # ofmap stream: 100352
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv12"
Sun 15:37: # cycles:       134217728
Sun 15:37: # ifmap stream: 100352
Sun 15:37: # coeff stream: 4723200
Sun 15:37: # ofmap stream: 50176
Sun 15:37: coeff vec size: 9
Sun 15:37: coeff stream bit width: 72
Sun 15:37: coeff stream chunk size: 9
Sun 15:37: Setup streams for kernel "conv13"
Sun 15:37: # cycles:       21233664
Sun 15:37: # ifmap stream: 50176
Sun 15:37: # coeff stream: 2368512
Sun 15:37: # ofmap stream: 50176
Sun 15:37: coeff vec size: 36
Sun 15:37: coeff stream bit width: 288
Sun 15:37: coeff stream chunk size: 9
Sun 15:38: Generating input files (VHDL, netlists, vendor specific IP cores)
Sun 20:49: Running back-end  build (15 phases)
Sun 20:49: (1/15) - Prepare MaxFile Data (GenerateMaxFileDataFile)
Sun 20:49: (2/15) - Synthesize DFE Modules (VivadoSynth)
Sun 20:49: Executing Synthesis Strategy VIVADO_DEFAULT
Sun 21:11: (3/15) - Generate Resource Report (VivadoResourceUsage)
Sun 21:11: (4/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Sun 21:12: (5/15) - Analyse Resource Usage (VivadoResourceCounter)
Sun 21:12: 
Sun 21:12: About to start chip vendor Map/Place/Route toolflow. This will take some time.
Sun 21:12: For this compile, we estimate this process may take longer than 1 hour.
Sun 21:12: We recommend running in simulation to verify correctness before building hardware.
Sun 21:12: 
Sun 21:12: PRELIMINARY RESOURCE USAGE
Sun 21:12: FPGA: xcVU9P-FLGB2104-2-E
Sun 21:12: Logic utilization:      249342 / 3546720 (7.03%)
Sun 21:12:   LUTs:                  96991 / 1182240 (8.20%)
Sun 21:12:   Primary FFs:          152351 / 2364480 (6.44%)
Sun 21:12: DSP blocks:                151 / 6840    (2.21%)
Sun 21:12: Block memory (BRAM18):    2222 / 4320    (51.44%)
Sun 21:12: Block memory (URAM):       130 / 960     (13.54%)
Sun 21:12: 
Sun 21:12: (6/15) - Analyse Power Usage (PreliminaryVivadoReportPower)
Sun 21:12: 
Sun 21:12: PRELIMINARY POWER REPORT
Sun 21:12: Total On-Chip Power (W) 10.47 (budget: 91.80) 
Sun 21:12: Dynamic Power (W)        7.78 
Sun 21:12: Device Static Power(W)   2.69 
Sun 21:12: 
Sun 21:12: (7/15) - Place DFE (VivadoImplementation)
Sun 21:12: Executing the following 5 Implementation Strategies in 5 threads:
Sun 21:12:  - VIVADO_DEFAULT
Sun 21:12:  - MAXELER1
Sun 21:12:  - MAXELER2
Sun 21:12:  - MAXELER3
Sun 21:12:  - MAXELER4
