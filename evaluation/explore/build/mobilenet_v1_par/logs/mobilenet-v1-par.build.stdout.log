Running maxjc ...
Using maxj batch compiler.
jar: /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/ecj.jar
MAXAPPJCP=.:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar \
	MAXAPPPKG=mobilenet_v1_par MAXSOURCEDIRS=../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src \
	maxJavaRun -v -m 8192 MobilenetV1ParManager \
	DFEModel=MAIA maxFileName=MobilenetV1Par target='DFE' enableMPCX=false \
	FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par/data/data-mobilenet-v1-par.txt 
]0; maxJavaRun: MobilenetV1ParManager DFEModel=MAIA maxFileName=MobilenetV1Par target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par/data/data-mobilenet-v1-par.txt maxJavaRun : Execute Java program with Maxeler environment

Input classpath     : 
MaxCompiler JAR     : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar
                      (from MAXCOMPILERDIR)
MAXAPPJCP           : .:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
MAXSOURCEDIRS       : ../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src

.maxJavaRun present : No
Custom Param file   : None
MAXAPPPKG           : mobilenet_v1_par
MAXJVMMEM           : 
MAXEMMAJCP          : 
MAXEMMARUN          : 
JACOCO_AGENT        : 
JACOCO_AGENT_OPTIONS: 

----------------------------------------------------------
Java class to run   : mobilenet_v1_par.MobilenetV1ParManager
Class arguments     : DFEModel=MAIA maxFileName=MobilenetV1Par target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par/data/data-mobilenet-v1-par.txt
Execution classpath : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar:
                      .:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/src:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/test:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
JVM memory limit    : 8192 MB
----------------------------------------------------------

Tue 23:07: MaxCompiler version: 2021.1
Tue 23:07: Build "MobilenetV1Par" start time: Tue Dec 21 23:07:26 GMT 2021
Tue 23:07: Main build process running as user rz3515 on host cccad5.doc.ic.ac.uk
Tue 23:07: Build location: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300
Tue 23:07: Detailed build log available in "_build.log"
Tue 23:07: 
Tue 23:07: ENGINE BUILD PARAMETERS
Tue 23:07: 	              Build name: MobilenetV1Par_MAIA_DFE_FREQ_300                                                                               
Tue 23:07: 	             maxFileName: MobilenetV1Par                                                                                                 
Tue 23:07: 	                  target: DFE                                                                                                            
Tue 23:07: 	                DFEModel: MAIA                                                                                                           
Tue 23:07: 	              enableMPCX: false                                                                                                          
Tue 23:07: 	                bitWidth: 32                                                                                                             
Tue 23:07: 	                     WBW: 32                                                                                                             
Tue 23:07: 	                   DTYPE: fixed                                                                                                          
Tue 23:07: 	           NUM_FRAC_BITS: 8                                                                                                              
Tue 23:07: 	                      PF: 1                                                                                                              
Tue 23:07: 	                      PC: 1                                                                                                              
Tue 23:07: 	                      PK: 1                                                                                                              
Tue 23:07: 	                       H: 1                                                                                                              
Tue 23:07: 	                       W: 1                                                                                                              
Tue 23:07: 	                       C: 1                                                                                                              
Tue 23:07: 	                       F: 1                                                                                                              
Tue 23:07: 	                       K: 1                                                                                                              
Tue 23:07: 	                     PAD: 0                                                                                                              
Tue 23:07: 	                       S: 1                                                                                                              
Tue 23:07: 	                     SEQ: 0                                                                                                              
Tue 23:07: 	                    FREQ: 300                                                                                                            
Tue 23:07: 	                USE_DRAM: false                                                                                                          
Tue 23:07: 	                 USE_BNN: false                                                                                                          
Tue 23:07: 	            USE_WINOGRAD: false                                                                                                          
Tue 23:07: 	WINOGRAD_WEIGHTS_OFFLINE: false                                                                                                          
Tue 23:07: 	   NUM_COEFF_FIFO_SPLITS: 1                                                                                                              
Tue 23:07: 	                   DEBUG: false                                                                                                          
Tue 23:07: 	           COEFF_ON_CHIP: false                                                                                                          
Tue 23:07: 	              INIT_COEFF: false                                                                                                          
Tue 23:07: 	              COEFF_FILE: /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par/data/data-mobilenet-v1-par.txt
Tue 23:07: Generating kernel conv0 ...
Tue 23:07: Instantiating kernel "conv0"
Tue 23:07: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:07: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:07: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:07: coeffOnChip = true
Tue 23:07: Input height = 224, output height = 224, pad = 1
Tue 23:07: Counter H = 226 W = 226
Tue 23:07: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:07: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:07: Read for key = conv0
Tue 23:07: Ifmap buffer configuration 262144 x 1
Tue 23:07: loop = false
Tue 23:07: Building line buffer for "conv0" ...
Tue 23:07: Line buffer shape 3 x 224, produces 1 number of 3 x 3 tiles per cycle
Tue 23:07: Line buffer input vector size: 1, output vector size: 9.
Tue 23:07: Number of separated line buffers: 1
Tue 23:07: Initialising line buffer kernel with 3 x 226 x 1
Tue 23:07: Size of line buffer output: 3
Tue 23:07: Number of line buffer output chunks: 3
Tue 23:07: Connecting outputs from chunk (#000) ...
Tue 23:07: Connecting outputs from chunk (#001) ...
Tue 23:07: Connecting outputs from chunk (#002) ...
Tue 23:07: Building the CORE arithmetic unit for "conv0" ...
Tue 23:07: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:07: CORE ifmap vector size: 9
Tue 23:07: CORE coefficient vector size: 18
Tue 23:07: CORE ofmap vector size: 2
Tue 23:07: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Tue 23:07: Connecting to output: ofmap
Tue 23:07: Compiling kernel "conv0"
Tue 23:08: 
Tue 23:08: Generating kernel conv1 ...
Tue 23:08: Instantiating kernel "conv1"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 112, output height = 112, pad = 1
Tue 23:08: Counter H = 114 W = 114
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv1" ...
Tue 23:08: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 114 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 114 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv1_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 16384 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv1_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 524288 addr_bits =    19
Tue 23:08: Depthwise coeff ROM depth = 16
Tue 23:08: Pointwise coeff ROM depth = 512
Tue 23:08: Read for key = conv1_dw
Tue 23:08: Read for key = conv1_pw
Tue 23:08: Compiling kernel "conv1"
Tue 23:08: 
Tue 23:08: Generating kernel conv2 ...
Tue 23:08: Instantiating kernel "conv2"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 112, output height = 112, pad = 1
Tue 23:08: Counter H = 114 W = 114
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv2" ...
Tue 23:08: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 114 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 114 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv2_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 131072 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv2_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Tue 23:08: Depthwise coeff ROM depth = 32
Tue 23:08: Pointwise coeff ROM depth = 2048
Tue 23:08: Read for key = conv2_dw
Tue 23:08: Read for key = conv2_pw
Tue 23:08: Compiling kernel "conv2"
Tue 23:08: 
Tue 23:08: Generating kernel conv3 ...
Tue 23:08: Instantiating kernel "conv3"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 56, output height = 56, pad = 1
Tue 23:08: Counter H = 58 W = 58
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv3" ...
Tue 23:08: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 58 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 58 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv3_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 4096 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv3_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 262144 addr_bits =    18
Tue 23:08: Depthwise coeff ROM depth = 64
Tue 23:08: Pointwise coeff ROM depth = 4096
Tue 23:08: Read for key = conv3_dw
Tue 23:08: Read for key = conv3_pw
Tue 23:08: Compiling kernel "conv3"
Tue 23:08: 
Tue 23:08: Generating kernel conv4 ...
Tue 23:08: Instantiating kernel "conv4"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 56, output height = 56, pad = 1
Tue 23:08: Counter H = 58 W = 58
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv4" ...
Tue 23:08: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 58 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 58 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv4_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 65536 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv4_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =  1024 addr_bits =    10
Tue 23:08: Depthwise coeff ROM depth = 64
Tue 23:08: Pointwise coeff ROM depth = 8192
Tue 23:08: Read for key = conv4_dw
Tue 23:08: Read for key = conv4_pw
Tue 23:08: Compiling kernel "conv4"
Tue 23:08: 
Tue 23:08: Generating kernel conv5 ...
Tue 23:08: Instantiating kernel "conv5"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 28, output height = 28, pad = 1
Tue 23:08: Counter H = 30 W = 30
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv5" ...
Tue 23:08: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 30 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 30 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv5_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 1024 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv5_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Tue 23:08: Depthwise coeff ROM depth = 128
Tue 23:08: Pointwise coeff ROM depth = 16384
Tue 23:08: Read for key = conv5_dw
Tue 23:08: Read for key = conv5_pw
Tue 23:08: Compiling kernel "conv5"
Tue 23:08: 
Tue 23:08: Generating kernel conv6 ...
Tue 23:08: Instantiating kernel "conv6"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 28, output height = 28, pad = 1
Tue 23:08: Counter H = 30 W = 30
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv6" ...
Tue 23:08: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 30 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 30 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv6_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 32768 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv6_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Tue 23:08: Depthwise coeff ROM depth = 128
Tue 23:08: Pointwise coeff ROM depth = 32768
Tue 23:08: Read for key = conv6_dw
Tue 23:08: Read for key = conv6_pw
Tue 23:08: Compiling kernel "conv6"
Tue 23:08: 
Tue 23:08: Generating kernel conv7 ...
Tue 23:08: Instantiating kernel "conv7"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv7" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv7_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 256 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv7_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 65536
Tue 23:08: Read for key = conv7_dw
Tue 23:08: Read for key = conv7_pw
Tue 23:08: Compiling kernel "conv7"
Tue 23:08: 
Tue 23:08: Generating kernel conv8 ...
Tue 23:08: Instantiating kernel "conv8"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv8" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv8_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 65536 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv8_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 65536
Tue 23:08: Read for key = conv8_dw
Tue 23:08: Read for key = conv8_pw
Tue 23:08: Compiling kernel "conv8"
Tue 23:08: 
Tue 23:08: Generating kernel conv9 ...
Tue 23:08: Instantiating kernel "conv9"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv9" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv9_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 256 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv9_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 65536
Tue 23:08: Read for key = conv9_dw
Tue 23:08: Read for key = conv9_pw
Tue 23:08: Compiling kernel "conv9"
Tue 23:08: 
Tue 23:08: Generating kernel conv10 ...
Tue 23:08: Instantiating kernel "conv10"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv10" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv10_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 65536 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv10_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 65536
Tue 23:08: Read for key = conv10_dw
Tue 23:08: Read for key = conv10_pw
Tue 23:08: Compiling kernel "conv10"
Tue 23:08: 
Tue 23:08: Generating kernel conv11 ...
Tue 23:08: Instantiating kernel "conv11"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv11" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv11_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 256 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv11_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 65536
Tue 23:08: Read for key = conv11_dw
Tue 23:08: Read for key = conv11_pw
Tue 23:08: Compiling kernel "conv11"
Tue 23:08: 
Tue 23:08: Generating kernel conv12 ...
Tue 23:08: Instantiating kernel "conv12"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 14, output height = 14, pad = 1
Tue 23:08: Counter H = 16 W = 16
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv12" ...
Tue 23:08: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 16 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv12_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 16384 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv12_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth =    64 addr_bits =     6
Tue 23:08: Depthwise coeff ROM depth = 256
Tue 23:08: Pointwise coeff ROM depth = 131072
Tue 23:08: Read for key = conv12_dw
Tue 23:08: Read for key = conv12_pw
Tue 23:08: Compiling kernel "conv12"
Tue 23:08: 
Tue 23:08: Generating kernel conv13 ...
Tue 23:08: Instantiating kernel "conv13"
Tue 23:08: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: coeffOnChip = true
Tue 23:08: Input height = 7, output height = 7, pad = 1
Tue 23:08: Counter H = 9 W = 9
Tue 23:08: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Tue 23:08: Pointwise coeff type = {DFEVectorType: 4 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Tue 23:08: Building line buffer for "conv13" ...
Tue 23:08: Line buffer shape 3 x 7, produces 1 number of 3 x 3 tiles per cycle
Tue 23:08: Line buffer input vector size: 2, output vector size: 18.
Tue 23:08: Number of separated line buffers: 2
Tue 23:08: Initialising line buffer kernel with 3 x 9 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Initialising line buffer kernel with 3 x 9 x 1
Tue 23:08: Size of line buffer output: 3
Tue 23:08: Number of line buffer output chunks: 3
Tue 23:08: Connecting outputs from chunk (#000) ...
Tue 23:08: Connecting outputs from chunk (#001) ...
Tue 23:08: Connecting outputs from chunk (#002) ...
Tue 23:08: Building the CORE arithmetic unit for "conv13_dw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 18
Tue 23:08: CORE coefficient vector size: 18
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: Ifmap buffer configuration 64 x 2
Tue 23:08: loop = false
Tue 23:08: Building the CORE arithmetic unit for "conv13_pw" ...
Tue 23:08: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Tue 23:08: CORE ifmap vector size: 2
Tue 23:08: CORE coefficient vector size: 4
Tue 23:08: CORE ofmap vector size: 2
Tue 23:08: [ConvLayerOfmapBuffer] depth = 32768 addr_bits =    15
Tue 23:08: Depthwise coeff ROM depth = 512
Tue 23:08: Pointwise coeff ROM depth = 262144
Tue 23:08: Read for key = conv13_dw
Tue 23:08: Read for key = conv13_pw
Tue 23:08: Compiling kernel "conv13"
Tue 23:08: 
Tue 23:08: Generating padding kernels for DRAM access
Tue 23:08: Instantiating kernel "ifmap_unpad"
Tue 23:08: Compiling kernel "ifmap_unpad"
Tue 23:08: 
Tue 23:08: Instantiating kernel "ofmap_pad"
Tue 23:08: Compiling kernel "ofmap_pad"
Tue 23:08: 
Tue 23:08: Setting up stream connections for conv0
Tue 23:08: Setting up stream connections for conv1
Tue 23:08: Setting up stream connections for conv2
Tue 23:08: Setting up stream connections for conv3
Tue 23:08: Setting up stream connections for conv4
Tue 23:08: Setting up stream connections for conv5
Tue 23:08: Setting up stream connections for conv6
Tue 23:08: Setting up stream connections for conv7
Tue 23:08: Setting up stream connections for conv8
Tue 23:08: Setting up stream connections for conv9
Tue 23:08: Setting up stream connections for conv10
Tue 23:08: Setting up stream connections for conv11
Tue 23:08: Setting up stream connections for conv12
Tue 23:08: Setting up stream connections for conv13
Tue 23:08: DRAM will be used to build the design
Tue 23:08: Setup streams for kernel "conv0"
Tue 23:08: # cycles:       2451648
Tue 23:08: # ifmap stream: 150528
Tue 23:08: # coeff stream: 864
Tue 23:08: # ofmap stream: 401408
Tue 23:08: coeff vec size: 18
Tue 23:08: coeff stream bit width: 144
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv1"
Tue 23:08: # cycles:       6653952
Tue 23:08: # ifmap stream: 401408
Tue 23:08: # coeff stream: 9504
Tue 23:08: # ofmap stream: 802816
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv2"
Tue 23:08: # cycles:       26615808
Tue 23:08: # ifmap stream: 802816
Tue 23:08: # coeff stream: 37440
Tue 23:08: # ofmap stream: 401408
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv3"
Tue 23:08: # cycles:       13778944
Tue 23:08: # ifmap stream: 401408
Tue 23:08: # coeff stream: 74880
Tue 23:08: # ofmap stream: 401408
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv4"
Tue 23:08: # cycles:       27557888
Tue 23:08: # ifmap stream: 401408
Tue 23:08: # coeff stream: 148608
Tue 23:08: # ofmap stream: 200704
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv5"
Tue 23:08: # cycles:       14745600
Tue 23:08: # ifmap stream: 200704
Tue 23:08: # coeff stream: 297216
Tue 23:08: # ofmap stream: 200704
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv6"
Tue 23:08: # cycles:       29491200
Tue 23:08: # ifmap stream: 200704
Tue 23:08: # coeff stream: 592128
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv7"
Tue 23:08: # cycles:       16777216
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 1184256
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv8"
Tue 23:08: # cycles:       16777216
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 1184256
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv9"
Tue 23:08: # cycles:       16777216
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 1184256
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv10"
Tue 23:08: # cycles:       16777216
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 1184256
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv11"
Tue 23:08: # cycles:       16777216
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 1184256
Tue 23:08: # ofmap stream: 100352
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv12"
Tue 23:08: # cycles:       33554432
Tue 23:08: # ifmap stream: 100352
Tue 23:08: # coeff stream: 2363904
Tue 23:08: # ofmap stream: 50176
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Setup streams for kernel "conv13"
Tue 23:08: # cycles:       21233664
Tue 23:08: # ifmap stream: 50176
Tue 23:08: # coeff stream: 4727808
Tue 23:08: # ofmap stream: 50176
Tue 23:08: coeff vec size: 36
Tue 23:08: coeff stream bit width: 288
Tue 23:08: coeff stream chunk size: 9
Tue 23:08: Generating input files (VHDL, netlists, vendor specific IP cores)
Wed 14:34: Running back-end  build (15 phases)
Wed 14:34: (1/15) - Prepare MaxFile Data (GenerateMaxFileDataFile)
Wed 14:34: (2/15) - Synthesize DFE Modules (VivadoSynth)
Wed 14:34: Executing Synthesis Strategy VIVADO_DEFAULT
Wed 14:58: (3/15) - Generate Resource Report (VivadoResourceUsage)
Wed 14:58: (4/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Wed 14:59: (5/15) - Analyse Resource Usage (VivadoResourceCounter)
Wed 14:59: 
Wed 14:59: About to start chip vendor Map/Place/Route toolflow. This will take some time.
Wed 14:59: For this compile, we estimate this process may take longer than 1 hour.
Wed 14:59: We recommend running in simulation to verify correctness before building hardware.
Wed 14:59: 
Wed 14:59: PRELIMINARY RESOURCE USAGE
Wed 14:59: FPGA: xcVU9P-FLGB2104-2-E
Wed 14:59: Logic utilization:      254427 / 3546720 (7.17%)
Wed 14:59:   LUTs:                  97868 / 1182240 (8.28%)
Wed 14:59:   Primary FFs:          156559 / 2364480 (6.62%)
Wed 14:59: DSP blocks:                313 / 6840    (4.58%)
Wed 14:59: Block memory (BRAM18):    1686 / 4320    (39.03%)
Wed 14:59: Block memory (URAM):        89 / 960     (9.27%)
Wed 14:59: 
Wed 14:59: (6/15) - Analyse Power Usage (PreliminaryVivadoReportPower)
Wed 14:59: 
Wed 14:59: PRELIMINARY POWER REPORT
Wed 14:59: Total On-Chip Power (W) 10.42 (budget: 91.80) 
Wed 14:59: Dynamic Power (W)        7.74 
Wed 14:59: Device Static Power(W)   2.68 
Wed 14:59: 
Wed 14:59: (7/15) - Place DFE (VivadoImplementation)
Wed 14:59: Executing the following 5 Implementation Strategies in 5 threads:
Wed 14:59:  - VIVADO_DEFAULT
Wed 14:59:  - MAXELER1
Wed 14:59:  - MAXELER2
Wed 14:59:  - MAXELER3
Wed 14:59:  - MAXELER4
Wed 16:28: Implementation: Strategy "VIVADO_DEFAULT" met timing with score 0 (best score 0)
Wed 16:28: Implementation: Strategy "MAXELER2" was cancelled (no timing score)
Wed 16:28: Implementation: Strategy "MAXELER1" was cancelled (no timing score)
Wed 16:28: Implementation: Strategy "MAXELER3" was cancelled (no timing score)
Wed 16:28: Implementation: Strategy "MAXELER4" was cancelled (no timing score)
Wed 16:28: (8/15) - Generate Resource Report (VivadoResourceUsage)
Wed 16:28: (9/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Wed 16:29: (10/15) - Analyse Power Usage (FinalVivadoReportPower)
Wed 16:29: 
Wed 16:29: FINAL POWER REPORT
Wed 16:29: Total On-Chip Power (W) 11.90 (budget: 91.80) 
Wed 16:29: Dynamic Power (W)        9.19 
Wed 16:29: Device Static Power(W)   2.71 
Wed 16:29: 
Wed 16:29: (11/15) - Generate Configuration (VivadoBitgen)
Wed 16:38: (12/15) - Update Checksum (VivadoUpdateChecksum)
Wed 16:42: (13/15) - Convert Programming File (VivadoCfgfileGen)
Wed 16:42: (14/15) - Generate MaxFile (VivadoGenerateMaxFile)
Wed 16:42: (15/15) - Clean Build Directory (VivadoCleanBuildDirectory)
Wed 16:42: 
Wed 16:42: FINAL RESOURCE USAGE
Wed 16:42: FPGA: xcVU9P-FLGB2104-2-E
Wed 16:42: Logic utilization:      232803 / 3546720 (6.56%)
Wed 16:42:   LUTs:                  86527 / 1182240 (7.32%)
Wed 16:42:   Primary FFs:          146276 / 2364480 (6.19%)
Wed 16:42: DSP blocks:                313 / 6840    (4.58%)
Wed 16:42: Block memory (BRAM18):    1686 / 4320    (39.03%)
Wed 16:42: Block memory (URAM):        89 / 960     (9.27%)
Wed 16:42: 
Wed 16:42: MaxFile: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max (MD5Sum: 6e32cd2bfc19bab1538285f7f18f9365)
Wed 16:42: Build completed: Wed Dec 22 16:42:47 GMT 2021 (took 17 hours, 35 mins, 21 secs)
cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.h /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/Maxfiles.h
cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par_backup.max
rm /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.h
rm /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max
mv /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par_backup.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max
# cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/../scratch/MobilenetV1Par.h /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.h
# cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/../scratch/MobilenetV1Par.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max
# rm -rf /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/../scratch
sliccompile /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max MobilenetV1Par_FREQ_300_dfe.o
Processing maxfile for MAX5_LIMA from '/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max'.
/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/clang/bin/start.sh clang -fgnu89-inline -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/dev/null" -DSLIC_NO_DESTRUCTORS -c /tmp/sliccompile_4190732503801039359/cobject/max_4766765258105809384.c -o /tmp/sliccompile_4190732503801039359/cobject/max_4766765258105809384.c.o 
/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/clang/bin/start.sh clang -fgnu89-inline -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results/MobilenetV1Par.max" -DSLIC_NO_DESTRUCTORS -c /vol/cc/opt/maxeler/maxcompiler-2021.1/src/slicinterface/MaxFileInit.c -o max_5778876183789061554.o 
ld -r /tmp/sliccompile_4190732503801039359/cobject/max_4766765258105809384.c.o max_5778876183789061554.o -o MobilenetV1Par_FREQ_300_dfe.o 
Copying .max file C object into '/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par'
g++ ../../src/mobilenet_v1_par/MobilenetV1ParCpuCode.cpp -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -I/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1Par_MAIA_DFE_FREQ_300/results -DDESIGN_NAME=MobilenetV1Par -c -o MobilenetV1Par_FREQ_300_dfec.o
g++ -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -o MobilenetV1Par_FREQ_300_dfe MobilenetV1Par_FREQ_300_dfe.o MobilenetV1Par_FREQ_300_dfec.o -L/mnt/ccnas2/bdp/rz3515/cccad/opt/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/maxeleros-sim/lib -L/lib/maxeleros-sim/lib -L./ -lmaxeleros -lglog -lgflags -lslic -lm -lpthread -lcurl
