BUILD_NAME_OPTION = _FREQ_300
Running maxjc ...
Using maxj batch compiler.
jar: /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/ecj.jar
MAXAPPJCP=.:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar \
	MAXAPPPKG=mobilenet_v1_par_s4 MAXSOURCEDIRS=../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src \
	maxJavaRun -v -m 8192 MobilenetV1ParS4Manager \
	DFEModel=MAIA maxFileName=MobilenetV1ParS4 target='DFE_SIM' enableMPCX=false \
	FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4/data/data-mobilenet-v1-par-s4.txt 
]0; maxJavaRun: MobilenetV1ParS4Manager DFEModel=MAIA maxFileName=MobilenetV1ParS4 target=DFE_SIM enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4/data/data-mobilenet-v1-par-s4.txt maxJavaRun : Execute Java program with Maxeler environment

Input classpath     : 
MaxCompiler JAR     : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar
                      (from MAXCOMPILERDIR)
MAXAPPJCP           : .:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
MAXSOURCEDIRS       : ../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src

.maxJavaRun present : No
Custom Param file   : None
MAXAPPPKG           : mobilenet_v1_par_s4
MAXJVMMEM           : 
MAXEMMAJCP          : 
MAXEMMARUN          : 
JACOCO_AGENT        : 
JACOCO_AGENT_OPTIONS: 

----------------------------------------------------------
Java class to run   : mobilenet_v1_par_s4.MobilenetV1ParS4Manager
Class arguments     : DFEModel=MAIA maxFileName=MobilenetV1ParS4 target=DFE_SIM enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4/data/data-mobilenet-v1-par-s4.txt
Execution classpath : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar:
                      .:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/src:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/test:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
JVM memory limit    : 8192 MB
----------------------------------------------------------

Wed 21:47: MaxCompiler version: 2021.1
Wed 21:47: Build "MobilenetV1ParS4" start time: Wed Dec 22 21:47:08 GMT 2021
Wed 21:47: Main build process running as user rz3515 on host cccad5.doc.ic.ac.uk
Wed 21:47: Build location: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300
Wed 21:47: Detailed build log available in "_build.log"
Wed 21:47: 
Wed 21:47: ENGINE BUILD PARAMETERS
Wed 21:47: 	              Build name: MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300                                                                               
Wed 21:47: 	             maxFileName: MobilenetV1ParS4                                                                                                     
Wed 21:47: 	                  target: DFE_SIM                                                                                                              
Wed 21:47: 	                DFEModel: MAIA                                                                                                                 
Wed 21:47: 	              enableMPCX: false                                                                                                                
Wed 21:47: 	                bitWidth: 32                                                                                                                   
Wed 21:47: 	                     WBW: 32                                                                                                                   
Wed 21:47: 	                   DTYPE: fixed                                                                                                                
Wed 21:47: 	           NUM_FRAC_BITS: 8                                                                                                                    
Wed 21:47: 	                      PF: 1                                                                                                                    
Wed 21:47: 	                      PC: 1                                                                                                                    
Wed 21:47: 	                      PK: 1                                                                                                                    
Wed 21:47: 	                       H: 1                                                                                                                    
Wed 21:47: 	                       W: 1                                                                                                                    
Wed 21:47: 	                       C: 1                                                                                                                    
Wed 21:47: 	                       F: 1                                                                                                                    
Wed 21:47: 	                       K: 1                                                                                                                    
Wed 21:47: 	                     PAD: 0                                                                                                                    
Wed 21:47: 	                       S: 1                                                                                                                    
Wed 21:47: 	                     SEQ: 0                                                                                                                    
Wed 21:47: 	                    FREQ: 300                                                                                                                  
Wed 21:47: 	                USE_DRAM: false                                                                                                                
Wed 21:47: 	                 USE_BNN: false                                                                                                                
Wed 21:47: 	            USE_WINOGRAD: false                                                                                                                
Wed 21:47: 	WINOGRAD_WEIGHTS_OFFLINE: false                                                                                                                
Wed 21:47: 	   NUM_COEFF_FIFO_SPLITS: 1                                                                                                                    
Wed 21:47: 	                   DEBUG: false                                                                                                                
Wed 21:47: 	           COEFF_ON_CHIP: false                                                                                                                
Wed 21:47: 	              INIT_COEFF: false                                                                                                                
Wed 21:47: 	              COEFF_FILE: /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4/data/data-mobilenet-v1-par-s4.txt
Wed 21:47: Generating kernel conv0 ...
Wed 21:47: Instantiating kernel "conv0"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 224, output height = 224, pad = 1
Wed 21:47: Counter H = 226 W = 226
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Read for key = conv0
Wed 21:47: Ifmap buffer configuration 262144 x 1
Wed 21:47: loop = false
Wed 21:47: Building line buffer for "conv0" ...
Wed 21:47: Line buffer shape 3 x 224, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 1, output vector size: 9.
Wed 21:47: Number of separated line buffers: 1
Wed 21:47: Initialising line buffer kernel with 3 x 226 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv0" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 9
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Wed 21:47: Connecting to output: ofmap
Wed 21:47: Compiling kernel "conv0"
Wed 21:47: 
Wed 21:47: Generating kernel conv1 ...
Wed 21:47: Instantiating kernel "conv1"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 112, output height = 112, pad = 1
Wed 21:47: Counter H = 114 W = 114
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv1" ...
Wed 21:47: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv1_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 16384 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv1_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 262144 addr_bits =    18
Wed 21:47: Depthwise coeff ROM depth = 8
Wed 21:47: Pointwise coeff ROM depth = 128
Wed 21:47: Read for key = conv1_dw
Wed 21:47: Read for key = conv1_pw
Wed 21:47: Compiling kernel "conv1"
Wed 21:47: 
Wed 21:47: Generating kernel conv2 ...
Wed 21:47: Instantiating kernel "conv2"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 112, output height = 112, pad = 1
Wed 21:47: Counter H = 114 W = 114
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv2" ...
Wed 21:47: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 114 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv2_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 65536 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv2_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Wed 21:47: Depthwise coeff ROM depth = 16
Wed 21:47: Pointwise coeff ROM depth = 512
Wed 21:47: Read for key = conv2_dw
Wed 21:47: Read for key = conv2_pw
Wed 21:47: Compiling kernel "conv2"
Wed 21:47: 
Wed 21:47: Generating kernel conv3 ...
Wed 21:47: Instantiating kernel "conv3"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 56, output height = 56, pad = 1
Wed 21:47: Counter H = 58 W = 58
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv3" ...
Wed 21:47: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv3_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 4096 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv3_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 131072 addr_bits =    17
Wed 21:47: Depthwise coeff ROM depth = 32
Wed 21:47: Pointwise coeff ROM depth = 1024
Wed 21:47: Read for key = conv3_dw
Wed 21:47: Read for key = conv3_pw
Wed 21:47: Compiling kernel "conv3"
Wed 21:47: 
Wed 21:47: Generating kernel conv4 ...
Wed 21:47: Instantiating kernel "conv4"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 56, output height = 56, pad = 1
Wed 21:47: Counter H = 58 W = 58
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv4" ...
Wed 21:47: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 58 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv4_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 32768 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv4_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =  1024 addr_bits =    10
Wed 21:47: Depthwise coeff ROM depth = 32
Wed 21:47: Pointwise coeff ROM depth = 2048
Wed 21:47: Read for key = conv4_dw
Wed 21:47: Read for key = conv4_pw
Wed 21:47: Compiling kernel "conv4"
Wed 21:47: 
Wed 21:47: Generating kernel conv5 ...
Wed 21:47: Instantiating kernel "conv5"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 28, output height = 28, pad = 1
Wed 21:47: Counter H = 30 W = 30
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv5" ...
Wed 21:47: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv5_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 1024 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv5_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Wed 21:47: Depthwise coeff ROM depth = 64
Wed 21:47: Pointwise coeff ROM depth = 4096
Wed 21:47: Read for key = conv5_dw
Wed 21:47: Read for key = conv5_pw
Wed 21:47: Compiling kernel "conv5"
Wed 21:47: 
Wed 21:47: Generating kernel conv6 ...
Wed 21:47: Instantiating kernel "conv6"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 28, output height = 28, pad = 1
Wed 21:47: Counter H = 30 W = 30
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv6" ...
Wed 21:47: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 30 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv6_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 16384 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv6_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Wed 21:47: Depthwise coeff ROM depth = 64
Wed 21:47: Pointwise coeff ROM depth = 8192
Wed 21:47: Read for key = conv6_dw
Wed 21:47: Read for key = conv6_pw
Wed 21:47: Compiling kernel "conv6"
Wed 21:47: 
Wed 21:47: Generating kernel conv7 ...
Wed 21:47: Instantiating kernel "conv7"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv7" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv7_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 256 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv7_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 32768 addr_bits =    15
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 16384
Wed 21:47: Read for key = conv7_dw
Wed 21:47: Read for key = conv7_pw
Wed 21:47: Compiling kernel "conv7"
Wed 21:47: 
Wed 21:47: Generating kernel conv8 ...
Wed 21:47: Instantiating kernel "conv8"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv8" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv8_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 32768 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv8_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 16384
Wed 21:47: Read for key = conv8_dw
Wed 21:47: Read for key = conv8_pw
Wed 21:47: Compiling kernel "conv8"
Wed 21:47: 
Wed 21:47: Generating kernel conv9 ...
Wed 21:47: Instantiating kernel "conv9"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv9" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv9_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 256 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv9_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 32768 addr_bits =    15
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 16384
Wed 21:47: Read for key = conv9_dw
Wed 21:47: Read for key = conv9_pw
Wed 21:47: Compiling kernel "conv9"
Wed 21:47: 
Wed 21:47: Generating kernel conv10 ...
Wed 21:47: Instantiating kernel "conv10"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv10" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv10_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 32768 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv10_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 16384
Wed 21:47: Read for key = conv10_dw
Wed 21:47: Read for key = conv10_pw
Wed 21:47: Compiling kernel "conv10"
Wed 21:47: 
Wed 21:47: Generating kernel conv11 ...
Wed 21:47: Instantiating kernel "conv11"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv11" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv11_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 256 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv11_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 32768 addr_bits =    15
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 16384
Wed 21:47: Read for key = conv11_dw
Wed 21:47: Read for key = conv11_pw
Wed 21:47: Compiling kernel "conv11"
Wed 21:47: 
Wed 21:47: Generating kernel conv12 ...
Wed 21:47: Instantiating kernel "conv12"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 14, output height = 14, pad = 1
Wed 21:47: Counter H = 16 W = 16
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv12" ...
Wed 21:47: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 16 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv12_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 8192 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv12_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth =    64 addr_bits =     6
Wed 21:47: Depthwise coeff ROM depth = 128
Wed 21:47: Pointwise coeff ROM depth = 32768
Wed 21:47: Read for key = conv12_dw
Wed 21:47: Read for key = conv12_pw
Wed 21:47: Compiling kernel "conv12"
Wed 21:47: 
Wed 21:47: Generating kernel conv13 ...
Wed 21:47: Instantiating kernel "conv13"
Wed 21:47: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: coeffOnChip = true
Wed 21:47: Input height = 7, output height = 7, pad = 1
Wed 21:47: Counter H = 9 W = 9
Wed 21:47: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Wed 21:47: Pointwise coeff type = {DFEVectorType: 16 x dfeFix(8, 0, TWOSCOMPLEMENT)}
Wed 21:47: Building line buffer for "conv13" ...
Wed 21:47: Line buffer shape 3 x 7, produces 1 number of 3 x 3 tiles per cycle
Wed 21:47: Line buffer input vector size: 4, output vector size: 36.
Wed 21:47: Number of separated line buffers: 4
Wed 21:47: Initialising line buffer kernel with 3 x 9 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 9 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 9 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Initialising line buffer kernel with 3 x 9 x 1
Wed 21:47: Size of line buffer output: 3
Wed 21:47: Number of line buffer output chunks: 3
Wed 21:47: Connecting outputs from chunk (#000) ...
Wed 21:47: Connecting outputs from chunk (#001) ...
Wed 21:47: Connecting outputs from chunk (#002) ...
Wed 21:47: Building the CORE arithmetic unit for "conv13_dw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 36
Wed 21:47: CORE coefficient vector size: 36
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: Ifmap buffer configuration 64 x 4
Wed 21:47: loop = false
Wed 21:47: Building the CORE arithmetic unit for "conv13_pw" ...
Wed 21:47: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Wed 21:47: CORE ifmap vector size: 4
Wed 21:47: CORE coefficient vector size: 16
Wed 21:47: CORE ofmap vector size: 4
Wed 21:47: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Wed 21:47: Depthwise coeff ROM depth = 256
Wed 21:47: Pointwise coeff ROM depth = 65536
Wed 21:47: Read for key = conv13_dw
Wed 21:47: Read for key = conv13_pw
Wed 21:47: Compiling kernel "conv13"
Wed 21:47: 
Wed 21:47: Generating padding kernels for DRAM access
Wed 21:47: Instantiating kernel "ifmap_unpad"
Wed 21:47: Compiling kernel "ifmap_unpad"
Wed 21:47: 
Wed 21:47: Instantiating kernel "ofmap_pad"
Wed 21:47: Compiling kernel "ofmap_pad"
Wed 21:47: 
Wed 21:47: Setting up stream connections for conv0
Wed 21:47: Setting up stream connections for conv1
Wed 21:47: Setting up stream connections for conv2
Wed 21:47: Setting up stream connections for conv3
Wed 21:47: Setting up stream connections for conv4
Wed 21:47: Setting up stream connections for conv5
Wed 21:47: Setting up stream connections for conv6
Wed 21:47: Setting up stream connections for conv7
Wed 21:47: Setting up stream connections for conv8
Wed 21:47: Setting up stream connections for conv9
Wed 21:47: Setting up stream connections for conv10
Wed 21:47: Setting up stream connections for conv11
Wed 21:47: Setting up stream connections for conv12
Wed 21:47: Setting up stream connections for conv13
Wed 21:47: DRAM will be used to build the design
Wed 21:47: Setup streams for kernel "conv0"
Wed 21:47: # cycles:       1225824
Wed 21:47: # ifmap stream: 150528
Wed 21:47: # coeff stream: 864
Wed 21:47: # ofmap stream: 401408
Wed 21:47: coeff vec size: 36
Wed 21:47: coeff stream bit width: 288
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv1"
Wed 21:47: # cycles:       1663488
Wed 21:47: # ifmap stream: 401408
Wed 21:47: # coeff stream: 4896
Wed 21:47: # ofmap stream: 802816
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv2"
Wed 21:47: # cycles:       6653952
Wed 21:47: # ifmap stream: 802816
Wed 21:47: # coeff stream: 19008
Wed 21:47: # ofmap stream: 401408
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv3"
Wed 21:47: # cycles:       3444736
Wed 21:47: # ifmap stream: 401408
Wed 21:47: # coeff stream: 38016
Wed 21:47: # ofmap stream: 401408
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv4"
Wed 21:47: # cycles:       6889472
Wed 21:47: # ifmap stream: 401408
Wed 21:47: # coeff stream: 74880
Wed 21:47: # ofmap stream: 200704
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv5"
Wed 21:47: # cycles:       3686400
Wed 21:47: # ifmap stream: 200704
Wed 21:47: # coeff stream: 149760
Wed 21:47: # ofmap stream: 200704
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv6"
Wed 21:47: # cycles:       7372800
Wed 21:47: # ifmap stream: 200704
Wed 21:47: # coeff stream: 297216
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv7"
Wed 21:47: # cycles:       4194304
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 594432
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv8"
Wed 21:47: # cycles:       4194304
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 594432
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv9"
Wed 21:47: # cycles:       4194304
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 594432
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv10"
Wed 21:47: # cycles:       4194304
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 594432
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv11"
Wed 21:47: # cycles:       4194304
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 594432
Wed 21:47: # ofmap stream: 100352
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv12"
Wed 21:47: # cycles:       8388608
Wed 21:47: # ifmap stream: 100352
Wed 21:47: # coeff stream: 1184256
Wed 21:47: # ofmap stream: 50176
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Setup streams for kernel "conv13"
Wed 21:47: # cycles:       5308416
Wed 21:47: # ifmap stream: 50176
Wed 21:47: # coeff stream: 2368512
Wed 21:47: # ofmap stream: 50176
Wed 21:47: coeff vec size: 144
Wed 21:47: coeff stream bit width: 1152
Wed 21:47: coeff stream chunk size: 9
Wed 21:47: Running back-end simulation build (3 phases)
Wed 21:47: (1/3) - Prepare MaxFile Data (GenerateMaxFileDataFile)
Wed 21:47: (2/3) - Compile Simulation Modules (SimCompilePass)
Wed 21:48: (3/3) - Generate MaxFile (AddSimObjectToMaxFilePass)
Wed 21:48: MaxFile: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/MobilenetV1ParS4.max (MD5Sum: e83e21e92b3ac35500486f4dd7d03d3c)
Wed 21:48: Build completed: Wed Dec 22 21:48:41 GMT 2021 (took 1 min, 32 secs)
cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/MobilenetV1ParS4.h /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/Maxfiles.h
sliccompile /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/MobilenetV1ParS4.max MobilenetV1ParS4_FREQ_300_sim.o
Processing maxfile for MAX5_LIMA_SIM from '/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/MobilenetV1ParS4.max'.
/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/clang/bin/start.sh clang -fgnu89-inline -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/dev/null" -DSLIC_NO_DESTRUCTORS -c /tmp/sliccompile_4197754182475023305/cobject/max_6796073866442240980.c -o /tmp/sliccompile_4197754182475023305/cobject/max_6796073866442240980.c.o 
/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/clang/bin/start.sh clang -fgnu89-inline -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results/MobilenetV1ParS4.max" -DSLIC_NO_DESTRUCTORS -c /vol/cc/opt/maxeler/maxcompiler-2021.1/src/slicinterface/MaxFileInit.c -o max_7327381992136345423.o 
ld -r /tmp/sliccompile_4197754182475023305/cobject/max_6796073866442240980.c.o max_7327381992136345423.o -o MobilenetV1ParS4_FREQ_300_sim.o 
Copying .max file C object into '/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4'
g++ ../../src/mobilenet_v1_par_s4/MobilenetV1ParS4CpuCode.cpp -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -g -I/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS4_MAIA_DFE_SIM_FREQ_300/results -D__SIM__ -DDESIGN_NAME=MobilenetV1ParS4 -c -o MobilenetV1ParS4_FREQ_300_simc.o
g++ -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -g -o MobilenetV1ParS4_FREQ_300_sim MobilenetV1ParS4_FREQ_300_sim.o MobilenetV1ParS4_FREQ_300_simc.o -L/mnt/ccnas2/bdp/rz3515/cccad/opt/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/maxeleros-sim/lib -L/lib/maxeleros-sim/lib -L./ -lmaxeleros -lglog -lgflags -lslic -lm -lpthread -lcurl
maxcompilersim -n rz3515a -cLIMA -d1 restart

Simulated system 'rz3515a' started:
    Board:                   MAX5C (default: 48GB RAM)
    RAM size for simulation: 51539607552 bytes.
    Temporary RAM file in    /tmp/. (Use option -k to preserve it.)
    Simulation log:          /homes/rz3515/.maxcompilersim/rz3515a-cccad5.log
    Daemon log:              /homes/rz3515/.maxcompilersim/rz3515a-cccad5_daemon.log

Simulated devices available:
    rz3515a0:rz3515a

To use simulated devices you need to set the environment variables
LD_PRELOAD and MAXELEROSDIR. As LD_PRELOAD must not contain spaces,
you might need to set LD_LIBRARY_PATH in addition (see the MaxCompiler
tutorial for details).  Also, ensure that you add the correct simulated
system name (namely "rz3515a") to your SLiC configuration. The following
examples assume there are no spaces in LD_PRELOAD or SLIC_CONF.
Example for BASH:
    export MAXELEROSDIR=$MAXCOMPILERDIR/lib/maxeleros-sim
    export LD_PRELOAD=$MAXELEROSDIR/lib/libmaxeleros.so:$LD_PRELOAD
    export SLIC_CONF="$SLIC_CONF;use_simulation=rz3515a"
Example for CSH:
    setenv MAXELEROSDIR $MAXCOMPILERDIR/lib/maxeleros-sim
    setenv LD_PRELOAD $MAXELEROSDIR/lib/libmaxeleros.so:$LD_PRELOAD
    setenv SLIC_CONF "$SLIC_CONF;use_simulation=rz3515a"

SLIC_CONF+="default_maxdebug_mode=MAX_DEBUG_ALWAYS;" SLIC_CONF+="use_simulation=rz3515a" LD_PRELOAD=/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/maxeleros-sim/lib/libmaxeleros.so ./MobilenetV1ParS4_FREQ_300_sim -n 2 -f /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s4/data/data-mobilenet-v1-par-s4.txt
