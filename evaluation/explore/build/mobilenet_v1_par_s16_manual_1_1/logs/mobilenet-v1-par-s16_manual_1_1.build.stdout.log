Running maxjc ...
Using maxj batch compiler.
jar: /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/ecj.jar
MAXAPPJCP=.:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar \
	MAXAPPPKG=mobilenet_v1_par_s16_manual_1_1 MAXSOURCEDIRS=../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src \
	maxJavaRun -v -m 8192 MobilenetV1ParS16Manual11Manager \
	DFEModel=MAIA maxFileName=MobilenetV1ParS16Manual11 target='DFE' enableMPCX=false \
	FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s16_manual_1_1/data/data-mobilenet-v1-par-s16_manual_1_1.txt 
]0; maxJavaRun: MobilenetV1ParS16Manual11Manager DFEModel=MAIA maxFileName=MobilenetV1ParS16Manual11 target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s16_manual_1_1/data/data-mobilenet-v1-par-s16_manual_1_1.txt maxJavaRun : Execute Java program with Maxeler environment

Input classpath     : 
MaxCompiler JAR     : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar
                      (from MAXCOMPILERDIR)
MAXAPPJCP           : .:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
MAXSOURCEDIRS       : ../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src

.maxJavaRun present : No
Custom Param file   : None
MAXAPPPKG           : mobilenet_v1_par_s16_manual_1_1
MAXJVMMEM           : 
MAXEMMAJCP          : 
MAXEMMARUN          : 
JACOCO_AGENT        : 
JACOCO_AGENT_OPTIONS: 

----------------------------------------------------------
Java class to run   : mobilenet_v1_par_s16_manual_1_1.MobilenetV1ParS16Manual11Manager
Class arguments     : DFEModel=MAIA maxFileName=MobilenetV1ParS16Manual11 target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s16_manual_1_1/data/data-mobilenet-v1-par-s16_manual_1_1.txt
Execution classpath : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar:
                      .:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/src:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/test:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
JVM memory limit    : 8192 MB
----------------------------------------------------------

Mon 14:31: MaxCompiler version: 2021.1
Mon 14:31: Build "MobilenetV1ParS16Manual11" start time: Mon Dec 27 14:31:09 GMT 2021
Mon 14:31: Main build process running as user rz3515 on host cccad5.doc.ic.ac.uk
Mon 14:31: Build location: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParS16Manual11_MAIA_DFE_FREQ_300
Mon 14:31: Detailed build log available in "_build.log"
Mon 14:31: 
Mon 14:31: ENGINE BUILD PARAMETERS
Mon 14:31: 	              Build name: MobilenetV1ParS16Manual11_MAIA_DFE_FREQ_300                                                                                                  
Mon 14:31: 	             maxFileName: MobilenetV1ParS16Manual11                                                                                                                    
Mon 14:31: 	                  target: DFE                                                                                                                                          
Mon 14:31: 	                DFEModel: MAIA                                                                                                                                         
Mon 14:31: 	              enableMPCX: false                                                                                                                                        
Mon 14:31: 	                bitWidth: 32                                                                                                                                           
Mon 14:31: 	                     WBW: 32                                                                                                                                           
Mon 14:31: 	                   DTYPE: fixed                                                                                                                                        
Mon 14:31: 	           NUM_FRAC_BITS: 8                                                                                                                                            
Mon 14:31: 	                      PF: 1                                                                                                                                            
Mon 14:31: 	                      PC: 1                                                                                                                                            
Mon 14:31: 	                      PK: 1                                                                                                                                            
Mon 14:31: 	                       H: 1                                                                                                                                            
Mon 14:31: 	                       W: 1                                                                                                                                            
Mon 14:31: 	                       C: 1                                                                                                                                            
Mon 14:31: 	                       F: 1                                                                                                                                            
Mon 14:31: 	                       K: 1                                                                                                                                            
Mon 14:31: 	                     PAD: 0                                                                                                                                            
Mon 14:31: 	                       S: 1                                                                                                                                            
Mon 14:31: 	                     SEQ: 0                                                                                                                                            
Mon 14:31: 	                    FREQ: 300                                                                                                                                          
Mon 14:31: 	                USE_DRAM: false                                                                                                                                        
Mon 14:31: 	                 USE_BNN: false                                                                                                                                        
Mon 14:31: 	            USE_WINOGRAD: false                                                                                                                                        
Mon 14:31: 	WINOGRAD_WEIGHTS_OFFLINE: false                                                                                                                                        
Mon 14:31: 	   NUM_COEFF_FIFO_SPLITS: 1                                                                                                                                            
Mon 14:31: 	                   DEBUG: false                                                                                                                                        
Mon 14:31: 	           COEFF_ON_CHIP: false                                                                                                                                        
Mon 14:31: 	              INIT_COEFF: false                                                                                                                                        
Mon 14:31: 	              COEFF_FILE: /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_s16_manual_1_1/data/data-mobilenet-v1-par-s16_manual_1_1.txt
Mon 14:31: Generating kernel conv0 ...
Mon 14:31: Instantiating kernel "conv0"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 224, output height = 224, pad = 1
Mon 14:31: Counter H = 226 W = 226
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Ifmap buffer configuration 262144 x 1
Mon 14:31: loop = false
Mon 14:31: Building line buffer for "conv0" ...
Mon 14:31: Line buffer shape 3 x 224, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 1, output vector size: 9.
Mon 14:31: Number of separated line buffers: 1
Mon 14:31: Initialising line buffer kernel with 3 x 226 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Read for key = conv0 depth = 6 raw data = 864
Mon 14:31: ROM created for conv0 of depth 6 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@fa36558
Mon 14:31: Building the CORE arithmetic unit for "conv0" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 9
Mon 14:31: CORE coefficient vector size: 144
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv0"
Mon 14:31: 
Mon 14:31: Generating kernel conv1 ...
Mon 14:31: Instantiating kernel "conv1"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 112, output height = 112, pad = 1
Mon 14:31: Counter H = 114 W = 114
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv1" ...
Mon 14:31: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 16, output vector size: 144.
Mon 14:31: Number of separated line buffers: 16
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 2
Mon 14:31: Read for key = conv1_dw depth = 2 raw data = 288
Mon 14:31: ROM created for conv1_dw of depth 2 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@4aa21f9d
Mon 14:31: Building the CORE arithmetic unit for "conv1_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 144
Mon 14:31: CORE coefficient vector size: 144
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: Ifmap buffer configuration 16384 x 16
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 8
Mon 14:31: Read for key = conv1_pw depth = 8 raw data = 2048
Mon 14:31: ROM created for conv1_pw of depth 8 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@332bcab0
Mon 14:31: Building the CORE arithmetic unit for "conv1_pw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 16
Mon 14:31: CORE coefficient vector size: 256
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv1"
Mon 14:31: 
Mon 14:31: Generating kernel conv2 ...
Mon 14:31: Instantiating kernel "conv2"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 112, output height = 112, pad = 1
Mon 14:31: Counter H = 114 W = 114
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv2" ...
Mon 14:31: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 16, output vector size: 144.
Mon 14:31: Number of separated line buffers: 16
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 114 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 4
Mon 14:31: Read for key = conv2_dw depth = 4 raw data = 576
Mon 14:31: ROM created for conv2_dw of depth 4 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@40304938
Mon 14:31: Building the CORE arithmetic unit for "conv2_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 144
Mon 14:31: CORE coefficient vector size: 144
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: Ifmap buffer configuration 65536 x 16
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 32
Mon 14:31: Read for key = conv2_pw depth = 32 raw data = 8192
Mon 14:31: ROM created for conv2_pw of depth 32 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7680beac
Mon 14:31: Building the CORE arithmetic unit for "conv2_pw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 16
Mon 14:31: CORE coefficient vector size: 256
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv2"
Mon 14:31: 
Mon 14:31: Generating kernel conv3 ...
Mon 14:31: Instantiating kernel "conv3"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 56, output height = 56, pad = 1
Mon 14:31: Counter H = 58 W = 58
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv3" ...
Mon 14:31: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 16, output vector size: 144.
Mon 14:31: Number of separated line buffers: 16
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 8
Mon 14:31: Read for key = conv3_dw depth = 8 raw data = 1152
Mon 14:31: ROM created for conv3_dw of depth 8 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@5a33ba9b
Mon 14:31: Building the CORE arithmetic unit for "conv3_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 144
Mon 14:31: CORE coefficient vector size: 144
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: Ifmap buffer configuration 4096 x 16
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 32
Mon 14:31: Read for key = conv3_pw depth = 32 raw data = 16384
Mon 14:31: ROM created for conv3_pw of depth 32 and type {DFEVectorType: 512 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7a282bad
Mon 14:31: Building the CORE arithmetic unit for "conv3_pw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 16
Mon 14:31: CORE coefficient vector size: 512
Mon 14:31: CORE ofmap vector size: 32
Mon 14:31: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv3"
Mon 14:31: 
Mon 14:31: Generating kernel conv4 ...
Mon 14:31: Instantiating kernel "conv4"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 56, output height = 56, pad = 1
Mon 14:31: Counter H = 58 W = 58
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv4" ...
Mon 14:31: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 32, output vector size: 288.
Mon 14:31: Number of separated line buffers: 32
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 58 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 4
Mon 14:31: Read for key = conv4_dw depth = 4 raw data = 1152
Mon 14:31: ROM created for conv4_dw of depth 4 and type {DFEVectorType: 288 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@ad5bb92
Mon 14:31: Building the CORE arithmetic unit for "conv4_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 288
Mon 14:31: CORE coefficient vector size: 288
Mon 14:31: CORE ofmap vector size: 32
Mon 14:31: Ifmap buffer configuration 16384 x 32
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 128
Mon 14:31: Read for key = conv4_pw depth = 128 raw data = 32768
Mon 14:31: ROM created for conv4_pw of depth 128 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@32550350
Mon 14:31: Building the CORE arithmetic unit for "conv4_pw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 32
Mon 14:31: CORE coefficient vector size: 256
Mon 14:31: CORE ofmap vector size: 8
Mon 14:31: [ConvLayerOfmapBuffer] depth =  1024 addr_bits =    10
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv4"
Mon 14:31: 
Mon 14:31: Generating kernel conv5 ...
Mon 14:31: Instantiating kernel "conv5"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 28, output height = 28, pad = 1
Mon 14:31: Counter H = 30 W = 30
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv5" ...
Mon 14:31: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 8, output vector size: 72.
Mon 14:31: Number of separated line buffers: 8
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 32
Mon 14:31: Read for key = conv5_dw depth = 32 raw data = 2304
Mon 14:31: ROM created for conv5_dw of depth 32 and type {DFEVectorType: 72 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@403237a4
Mon 14:31: Building the CORE arithmetic unit for "conv5_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 72
Mon 14:31: CORE coefficient vector size: 72
Mon 14:31: CORE ofmap vector size: 8
Mon 14:31: Ifmap buffer configuration 1024 x 8
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 512
Mon 14:31: Read for key = conv5_pw depth = 512 raw data = 65536
Mon 14:31: ROM created for conv5_pw of depth 512 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@5927f2b1
Mon 14:31: Building the CORE arithmetic unit for "conv5_pw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 8
Mon 14:31: CORE coefficient vector size: 128
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:31: Connecting to output: ofmap
Mon 14:31: Compiling kernel "conv5"
Mon 14:31: 
Mon 14:31: Generating kernel conv6 ...
Mon 14:31: Instantiating kernel "conv6"
Mon 14:31: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: coeffOnChip = true
Mon 14:31: Input height = 28, output height = 28, pad = 1
Mon 14:31: Counter H = 30 W = 30
Mon 14:31: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:31: Building line buffer for "conv6" ...
Mon 14:31: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Mon 14:31: Line buffer input vector size: 16, output vector size: 144.
Mon 14:31: Number of separated line buffers: 16
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Initialising line buffer kernel with 3 x 30 x 1
Mon 14:31: Size of line buffer output: 3
Mon 14:31: Number of line buffer output chunks: 3
Mon 14:31: Connecting outputs from chunk (#000) ...
Mon 14:31: Connecting outputs from chunk (#001) ...
Mon 14:31: Connecting outputs from chunk (#002) ...
Mon 14:31: Depthwise coeff ROM depth = 16
Mon 14:31: Read for key = conv6_dw depth = 16 raw data = 2304
Mon 14:31: ROM created for conv6_dw of depth 16 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@24e021d8
Mon 14:31: Building the CORE arithmetic unit for "conv6_dw" ...
Mon 14:31: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:31: CORE ifmap vector size: 144
Mon 14:31: CORE coefficient vector size: 144
Mon 14:31: CORE ofmap vector size: 16
Mon 14:31: Ifmap buffer configuration 16384 x 16
Mon 14:31: loop = false
Mon 14:31: Pointwise coeff ROM depth = 512
Mon 14:32: Read for key = conv6_pw depth = 512 raw data = 131072
Mon 14:32: ROM created for conv6_pw of depth 512 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@6c7554d6
Mon 14:32: Building the CORE arithmetic unit for "conv6_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 16
Mon 14:32: CORE coefficient vector size: 256
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv6"
Mon 14:32: 
Mon 14:32: Generating kernel conv7 ...
Mon 14:32: Instantiating kernel "conv7"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv7" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 16, output vector size: 144.
Mon 14:32: Number of separated line buffers: 16
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 32
Mon 14:32: Read for key = conv7_dw depth = 32 raw data = 4608
Mon 14:32: ROM created for conv7_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7fda5ad6
Mon 14:32: Building the CORE arithmetic unit for "conv7_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 144
Mon 14:32: CORE coefficient vector size: 144
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: Ifmap buffer configuration 256 x 16
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv7_pw depth = 2048 raw data = 262144
Mon 14:32: ROM created for conv7_pw of depth 2048 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@6d84e0fb
Mon 14:32: Building the CORE arithmetic unit for "conv7_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 16
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv7"
Mon 14:32: 
Mon 14:32: Generating kernel conv8 ...
Mon 14:32: Instantiating kernel "conv8"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv8" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 8, output vector size: 72.
Mon 14:32: Number of separated line buffers: 8
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 64
Mon 14:32: Read for key = conv8_dw depth = 64 raw data = 4608
Mon 14:32: ROM created for conv8_dw of depth 64 and type {DFEVectorType: 72 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@a5ca453
Mon 14:32: Building the CORE arithmetic unit for "conv8_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 72
Mon 14:32: CORE coefficient vector size: 72
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: Ifmap buffer configuration 16384 x 8
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv8_pw depth = 2048 raw data = 262144
Mon 14:32: ROM created for conv8_pw of depth 2048 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@3f91ca50
Mon 14:32: Building the CORE arithmetic unit for "conv8_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 8
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv8"
Mon 14:32: 
Mon 14:32: Generating kernel conv9 ...
Mon 14:32: Instantiating kernel "conv9"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv9" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 16, output vector size: 144.
Mon 14:32: Number of separated line buffers: 16
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 32
Mon 14:32: Read for key = conv9_dw depth = 32 raw data = 4608
Mon 14:32: ROM created for conv9_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@3b25b4c3
Mon 14:32: Building the CORE arithmetic unit for "conv9_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 144
Mon 14:32: CORE coefficient vector size: 144
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: Ifmap buffer configuration 256 x 16
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv9_pw depth = 2048 raw data = 262144
Mon 14:32: ROM created for conv9_pw of depth 2048 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@2ec1ca1e
Mon 14:32: Building the CORE arithmetic unit for "conv9_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 16
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv9"
Mon 14:32: 
Mon 14:32: Generating kernel conv10 ...
Mon 14:32: Instantiating kernel "conv10"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv10" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 8, output vector size: 72.
Mon 14:32: Number of separated line buffers: 8
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 64
Mon 14:32: Read for key = conv10_dw depth = 64 raw data = 4608
Mon 14:32: ROM created for conv10_dw of depth 64 and type {DFEVectorType: 72 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@4f58421a
Mon 14:32: Building the CORE arithmetic unit for "conv10_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 72
Mon 14:32: CORE coefficient vector size: 72
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: Ifmap buffer configuration 16384 x 8
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv10_pw depth = 2048 raw data = 262144
Mon 14:32: ROM created for conv10_pw of depth 2048 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@2736b07b
Mon 14:32: Building the CORE arithmetic unit for "conv10_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 8
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv10"
Mon 14:32: 
Mon 14:32: Generating kernel conv11 ...
Mon 14:32: Instantiating kernel "conv11"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv11" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 16, output vector size: 144.
Mon 14:32: Number of separated line buffers: 16
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 32
Mon 14:32: Read for key = conv11_dw depth = 32 raw data = 4608
Mon 14:32: ROM created for conv11_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@66035307
Mon 14:32: Building the CORE arithmetic unit for "conv11_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 144
Mon 14:32: CORE coefficient vector size: 144
Mon 14:32: CORE ofmap vector size: 16
Mon 14:32: Ifmap buffer configuration 256 x 16
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv11_pw depth = 2048 raw data = 262144
Mon 14:32: ROM created for conv11_pw of depth 2048 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@b308aa8
Mon 14:32: Building the CORE arithmetic unit for "conv11_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 16
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv11"
Mon 14:32: 
Mon 14:32: Generating kernel conv12 ...
Mon 14:32: Instantiating kernel "conv12"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 14, output height = 14, pad = 1
Mon 14:32: Counter H = 16 W = 16
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv12" ...
Mon 14:32: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 8, output vector size: 72.
Mon 14:32: Number of separated line buffers: 8
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 16 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 64
Mon 14:32: Read for key = conv12_dw depth = 64 raw data = 4608
Mon 14:32: ROM created for conv12_dw of depth 64 and type {DFEVectorType: 72 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@4527803c
Mon 14:32: Building the CORE arithmetic unit for "conv12_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 72
Mon 14:32: CORE coefficient vector size: 72
Mon 14:32: CORE ofmap vector size: 8
Mon 14:32: Ifmap buffer configuration 16384 x 8
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 2048
Mon 14:32: Read for key = conv12_pw depth = 2048 raw data = 524288
Mon 14:32: ROM created for conv12_pw of depth 2048 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@19808f29
Mon 14:32: Building the CORE arithmetic unit for "conv12_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 8
Mon 14:32: CORE coefficient vector size: 256
Mon 14:32: CORE ofmap vector size: 32
Mon 14:32: [ConvLayerOfmapBuffer] depth =    64 addr_bits =     6
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv12"
Mon 14:32: 
Mon 14:32: Generating kernel conv13 ...
Mon 14:32: Instantiating kernel "conv13"
Mon 14:32: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: coeffOnChip = true
Mon 14:32: Input height = 7, output height = 7, pad = 1
Mon 14:32: Counter H = 9 W = 9
Mon 14:32: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Mon 14:32: Building line buffer for "conv13" ...
Mon 14:32: Line buffer shape 3 x 7, produces 1 number of 3 x 3 tiles per cycle
Mon 14:32: Line buffer input vector size: 32, output vector size: 288.
Mon 14:32: Number of separated line buffers: 32
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Initialising line buffer kernel with 3 x 9 x 1
Mon 14:32: Size of line buffer output: 3
Mon 14:32: Number of line buffer output chunks: 3
Mon 14:32: Connecting outputs from chunk (#000) ...
Mon 14:32: Connecting outputs from chunk (#001) ...
Mon 14:32: Connecting outputs from chunk (#002) ...
Mon 14:32: Depthwise coeff ROM depth = 32
Mon 14:32: Read for key = conv13_dw depth = 32 raw data = 9216
Mon 14:32: ROM created for conv13_dw of depth 32 and type {DFEVectorType: 288 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@55194805
Mon 14:32: Building the CORE arithmetic unit for "conv13_dw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 288
Mon 14:32: CORE coefficient vector size: 288
Mon 14:32: CORE ofmap vector size: 32
Mon 14:32: Ifmap buffer configuration 128 x 32
Mon 14:32: loop = false
Mon 14:32: Pointwise coeff ROM depth = 8192
Mon 14:32: Read for key = conv13_pw depth = 8192 raw data = 1048576
Mon 14:32: ROM created for conv13_pw of depth 8192 and type {DFEVectorType: 128 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@40397665
Mon 14:32: Building the CORE arithmetic unit for "conv13_pw" ...
Mon 14:32: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Mon 14:32: CORE ifmap vector size: 32
Mon 14:32: CORE coefficient vector size: 128
Mon 14:32: CORE ofmap vector size: 4
Mon 14:32: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Mon 14:32: Connecting to output: ofmap
Mon 14:32: Compiling kernel "conv13"
Mon 14:32: 
Mon 14:32: Generating padding kernels for DRAM access
Mon 14:32: Instantiating kernel "ifmap_unpad"
Mon 14:32: Compiling kernel "ifmap_unpad"
Mon 14:32: 
Mon 14:32: Instantiating kernel "ofmap_pad"
Mon 14:32: Compiling kernel "ofmap_pad"
Mon 14:32: 
Mon 14:32: Setting up stream connections for conv0
Mon 14:32: Setting up stream connections for conv1
Mon 14:32: Connecting ifmap <== conv0: ofmap
Mon 14:32: Setting up stream connections for conv2
Mon 14:32: Connecting ifmap <== conv1: ofmap
Mon 14:32: Setting up stream connections for conv3
Mon 14:32: Connecting ifmap <== conv2: ofmap
Mon 14:32: Setting up stream connections for conv4
Mon 14:32: Connecting ifmap <== conv3: ofmap
Mon 14:32: Setting up stream connections for conv5
Mon 14:32: Connecting ifmap <== conv4: ofmap
Mon 14:32: Setting up stream connections for conv6
Mon 14:32: Connecting ifmap <== conv5: ofmap
Mon 14:32: Setting up stream connections for conv7
Mon 14:32: Connecting ifmap <== conv6: ofmap
Mon 14:32: Setting up stream connections for conv8
Mon 14:32: Connecting ifmap <== conv7: ofmap
Mon 14:32: Setting up stream connections for conv9
Mon 14:32: Connecting ifmap <== conv8: ofmap
Mon 14:32: Setting up stream connections for conv10
Mon 14:32: Connecting ifmap <== conv9: ofmap
Mon 14:32: Setting up stream connections for conv11
Mon 14:32: Connecting ifmap <== conv10: ofmap
Mon 14:32: Setting up stream connections for conv12
Mon 14:32: Connecting ifmap <== conv11: ofmap
Mon 14:32: Setting up stream connections for conv13
Mon 14:32: Connecting ifmap <== conv12: ofmap
Mon 14:32: DRAM will be used to build the design
Mon 14:32: Setup streams for kernel "conv0"
Mon 14:32: # cycles:       306456
Mon 14:32: # ifmap stream: 150528
Mon 14:32: # ofmap stream: 401408
Mon 14:32: coeff vec size: 144
Mon 14:32: coeff stream bit width: 1152
Mon 14:32: coeff stream chunk size: 9
cp.C = 32
Mon 14:32: Setup streams for kernel "conv1"
Mon 14:32: # cycles:       103968
Mon 14:32: # ifmap stream: 401408
Mon 14:32: # ofmap stream: 802816
Mon 14:32: coeff vec size: 2304
Mon 14:32: coeff stream bit width: 18432
Mon 14:32: coeff stream chunk size: 9
cp.C = 64
Mon 14:32: Setup streams for kernel "conv2"
Mon 14:32: # cycles:       415872
Mon 14:32: # ifmap stream: 802816
Mon 14:32: # ofmap stream: 401408
Mon 14:32: coeff vec size: 2304
Mon 14:32: coeff stream bit width: 18432
Mon 14:32: coeff stream chunk size: 9
cp.C = 128
Mon 14:32: Setup streams for kernel "conv3"
Mon 14:32: # cycles:       107648
Mon 14:32: # ifmap stream: 401408
Mon 14:32: # ofmap stream: 401408
Mon 14:32: coeff vec size: 4608
Mon 14:32: coeff stream bit width: 36864
Mon 14:32: coeff stream chunk size: 9
cp.C = 128
Mon 14:32: Setup streams for kernel "conv4"
Mon 14:32: # cycles:       430592
Mon 14:32: # ifmap stream: 401408
Mon 14:32: # ofmap stream: 200704
Mon 14:32: coeff vec size: 2304
Mon 14:32: coeff stream bit width: 18432
Mon 14:32: coeff stream chunk size: 9
cp.C = 256
Mon 14:32: Setup streams for kernel "conv5"
Mon 14:32: # cycles:       460800
Mon 14:32: # ifmap stream: 200704
Mon 14:32: # ofmap stream: 200704
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 256
Mon 14:32: Setup streams for kernel "conv6"
Mon 14:32: # cycles:       460800
Mon 14:32: # ifmap stream: 200704
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 2304
Mon 14:32: coeff stream bit width: 18432
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv7"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv8"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv9"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv10"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv11"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 100352
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
cp.C = 512
Mon 14:32: Setup streams for kernel "conv12"
Mon 14:32: # cycles:       524288
Mon 14:32: # ifmap stream: 100352
Mon 14:32: # ofmap stream: 50176
Mon 14:32: coeff vec size: 2304
Mon 14:32: coeff stream bit width: 18432
Mon 14:32: coeff stream chunk size: 9
cp.C = 1024
Mon 14:32: Setup streams for kernel "conv13"
Mon 14:32: # cycles:       663552
Mon 14:32: # ifmap stream: 50176
Mon 14:32: # ofmap stream: 50176
Mon 14:32: coeff vec size: 1152
Mon 14:32: coeff stream bit width: 9216
Mon 14:32: coeff stream chunk size: 9
Mon 14:34: Generating input files (VHDL, netlists, vendor specific IP cores)
Mon 16:18: Running back-end  build (15 phases)
Mon 16:18: (1/15) - Prepare MaxFile Data (GenerateMaxFileDataFile)
Mon 16:18: (2/15) - Synthesize DFE Modules (VivadoSynth)
Mon 16:18: Executing Synthesis Strategy VIVADO_DEFAULT
Mon 17:42: (3/15) - Generate Resource Report (VivadoResourceUsage)
Mon 17:42: (4/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Mon 17:43: (5/15) - Analyse Resource Usage (VivadoResourceCounter)
Mon 17:43: 
Mon 17:43: About to start chip vendor Map/Place/Route toolflow. This will take some time.
Mon 17:43: For this compile, we estimate this process may take longer than 1 hour.
Mon 17:43: We recommend running in simulation to verify correctness before building hardware.
Mon 17:43: 
Mon 17:43: PRELIMINARY RESOURCE USAGE
Mon 17:43: FPGA: xcVU9P-FLGB2104-2-E
Mon 17:43: Logic utilization:      656646 / 3546720 (18.51%)
Mon 17:43:   LUTs:                 124278 / 1182240 (10.51%)
Mon 17:43:   Primary FFs:          532368 / 2364480 (22.52%)
Mon 17:43: DSP blocks:               4725 / 6840    (69.08%)
Mon 17:43: Block memory (BRAM18):    1474 / 4320    (34.12%)
Mon 17:43: Block memory (URAM):       248 / 960     (25.83%)
Mon 17:43: 
Mon 17:43: (6/15) - Analyse Power Usage (PreliminaryVivadoReportPower)
Mon 17:43: 
Mon 17:43: PRELIMINARY POWER REPORT
Mon 17:43: Total On-Chip Power (W) 14.33 (budget: 91.80) 
Mon 17:43: Dynamic Power (W)       11.56 
Mon 17:43: Device Static Power(W)   2.77 
Mon 17:43: 
Mon 17:43: (7/15) - Place DFE (VivadoImplementation)
Mon 17:43: Executing the following 10 Implementation Strategies in 4 threads:
Mon 17:43:  - VIVADO_DEFAULT
Mon 17:43:  - MAXELER1
Mon 17:43:  - MAXELER2
Mon 17:43:  - MAXELER3
Mon 17:43:  - MAXELER4
Mon 17:43:  - PERFORMANCE_EARLY_BLOCK_PLACEMENT
Mon 17:43:  - PERFORMANCE_EXPLORE
Mon 17:43:  - PERFORMANCE_EXTRA_TIMING_OPT
Mon 17:43:  - PERFORMANCE_NET_DELAY_HIGH
Mon 17:43:  - PERFORMANCE_REFINE_PLACEMENT
