Running maxjc ...
Using maxj batch compiler.
jar: /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/ecj.jar
MAXAPPJCP=.:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar \
	MAXAPPPKG=mobilenet_v1_par_searched MAXSOURCEDIRS=../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src \
	maxJavaRun -v -m 8192 MobilenetV1ParSearchedManager \
	DFEModel=MAIA maxFileName=MobilenetV1ParSearched target='DFE' enableMPCX=false \
	FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_searched/data/data-mobilenet-v1-searched_FREQ-300.txt 
]0; maxJavaRun: MobilenetV1ParSearchedManager DFEModel=MAIA maxFileName=MobilenetV1ParSearched target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_searched/data/data-mobilenet-v1-searched_FREQ-300.txt maxJavaRun : Execute Java program with Maxeler environment

Input classpath     : 
MaxCompiler JAR     : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar
                      (from MAXCOMPILERDIR)
MAXAPPJCP           : .:/mnt/ccnas2/bdp/rz3515/projects/deacon/src:/mnt/ccnas2/bdp/rz3515/projects/deacon/test:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
MAXSOURCEDIRS       : ../../src:/mnt/ccnas2/bdp/rz3515/projects/deacon/src

.maxJavaRun present : No
Custom Param file   : None
MAXAPPPKG           : mobilenet_v1_par_searched
MAXJVMMEM           : 
MAXEMMAJCP          : 
MAXEMMARUN          : 
JACOCO_AGENT        : 
JACOCO_AGENT_OPTIONS: 

----------------------------------------------------------
Java class to run   : mobilenet_v1_par_searched.MobilenetV1ParSearchedManager
Class arguments     : DFEModel=MAIA maxFileName=MobilenetV1ParSearched target=DFE enableMPCX=false FREQ=300 DEBUG=false COEFF_FILE=/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_searched/data/data-mobilenet-v1-searched_FREQ-300.txt
Execution classpath : /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/MaxCompiler.jar:
                      .:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/src:
                      /mnt/ccnas2/bdp/rz3515/projects/deacon/test:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max4Platform.jar:
                      /vol/cc/opt/maxeler/maxcompiler-2021.1/lib/Max5Platform.jar
JVM memory limit    : 8192 MB
----------------------------------------------------------

Sun 20:57: MaxCompiler version: 2021.1
Sun 20:57: Build "MobilenetV1ParSearched" start time: Sun Dec 26 20:57:57 GMT 2021
Sun 20:57: Main build process running as user rz3515 on host cccad5.doc.ic.ac.uk
Sun 20:57: Build location: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300
Sun 20:57: Detailed build log available in "_build.log"
Sun 20:57: 
Sun 20:57: ENGINE BUILD PARAMETERS
Sun 20:57: 	              Build name: MobilenetV1ParSearched_MAIA_DFE_FREQ_300                                                                                              
Sun 20:57: 	             maxFileName: MobilenetV1ParSearched                                                                                                                
Sun 20:57: 	                  target: DFE                                                                                                                                   
Sun 20:57: 	                DFEModel: MAIA                                                                                                                                  
Sun 20:57: 	              enableMPCX: false                                                                                                                                 
Sun 20:57: 	                bitWidth: 32                                                                                                                                    
Sun 20:57: 	                     WBW: 32                                                                                                                                    
Sun 20:57: 	                   DTYPE: fixed                                                                                                                                 
Sun 20:57: 	           NUM_FRAC_BITS: 8                                                                                                                                     
Sun 20:57: 	                      PF: 1                                                                                                                                     
Sun 20:57: 	                      PC: 1                                                                                                                                     
Sun 20:57: 	                      PK: 1                                                                                                                                     
Sun 20:57: 	                       H: 1                                                                                                                                     
Sun 20:57: 	                       W: 1                                                                                                                                     
Sun 20:57: 	                       C: 1                                                                                                                                     
Sun 20:57: 	                       F: 1                                                                                                                                     
Sun 20:57: 	                       K: 1                                                                                                                                     
Sun 20:57: 	                     PAD: 0                                                                                                                                     
Sun 20:57: 	                       S: 1                                                                                                                                     
Sun 20:57: 	                     SEQ: 0                                                                                                                                     
Sun 20:57: 	                    FREQ: 300                                                                                                                                   
Sun 20:57: 	                USE_DRAM: false                                                                                                                                 
Sun 20:57: 	                 USE_BNN: false                                                                                                                                 
Sun 20:57: 	            USE_WINOGRAD: false                                                                                                                                 
Sun 20:57: 	WINOGRAD_WEIGHTS_OFFLINE: false                                                                                                                                 
Sun 20:57: 	   NUM_COEFF_FIFO_SPLITS: 1                                                                                                                                     
Sun 20:57: 	                   DEBUG: false                                                                                                                                 
Sun 20:57: 	           COEFF_ON_CHIP: false                                                                                                                                 
Sun 20:57: 	              INIT_COEFF: false                                                                                                                                 
Sun 20:57: 	              COEFF_FILE: /mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_searched/data/data-mobilenet-v1-searched_FREQ-300.txt
Sun 20:58: Generating kernel conv0 ...
Sun 20:58: Instantiating kernel "conv0"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 224, output height = 224, pad = 1
Sun 20:58: Counter H = 226 W = 226
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Ifmap buffer configuration 262144 x 1
Sun 20:58: loop = false
Sun 20:58: Building line buffer for "conv0" ...
Sun 20:58: Line buffer shape 3 x 224, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 1, output vector size: 9.
Sun 20:58: Number of separated line buffers: 1
Sun 20:58: Initialising line buffer kernel with 3 x 226 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Read for key = conv0 depth = 6 raw data = 864
Sun 20:58: ROM created for conv0 of depth 6 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@25ce9dc4
Sun 20:58: Building the CORE arithmetic unit for "conv0" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 9
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv0"
Sun 20:58: 
Sun 20:58: Generating kernel conv1 ...
Sun 20:58: Instantiating kernel "conv1"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 112, output height = 112, pad = 1
Sun 20:58: Counter H = 114 W = 114
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv1" ...
Sun 20:58: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 2
Sun 20:58: Read for key = conv1_dw depth = 2 raw data = 288
Sun 20:58: ROM created for conv1_dw of depth 2 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@f9f3928
Sun 20:58: Building the CORE arithmetic unit for "conv1_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 16384 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 8
Sun 20:58: Read for key = conv1_pw depth = 8 raw data = 2048
Sun 20:58: ROM created for conv1_pw of depth 8 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7c2924d7
Sun 20:58: Building the CORE arithmetic unit for "conv1_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv1"
Sun 20:58: 
Sun 20:58: Generating kernel conv2 ...
Sun 20:58: Instantiating kernel "conv2"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 112, output height = 112, pad = 1
Sun 20:58: Counter H = 114 W = 114
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv2" ...
Sun 20:58: Line buffer shape 3 x 112, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 114 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 4
Sun 20:58: Read for key = conv2_dw depth = 4 raw data = 576
Sun 20:58: ROM created for conv2_dw of depth 4 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@1798c749
Sun 20:58: Building the CORE arithmetic unit for "conv2_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 65536 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 16
Sun 20:58: Read for key = conv2_pw depth = 16 raw data = 8192
Sun 20:58: ROM created for conv2_pw of depth 16 and type {DFEVectorType: 512 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@66c88fce
Sun 20:58: Building the CORE arithmetic unit for "conv2_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 512
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv2"
Sun 20:58: 
Sun 20:58: Generating kernel conv3 ...
Sun 20:58: Instantiating kernel "conv3"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 56, output height = 56, pad = 1
Sun 20:58: Counter H = 58 W = 58
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv3" ...
Sun 20:58: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 32, output vector size: 288.
Sun 20:58: Number of separated line buffers: 32
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 4
Sun 20:58: Read for key = conv3_dw depth = 4 raw data = 1152
Sun 20:58: ROM created for conv3_dw of depth 4 and type {DFEVectorType: 288 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@1ae0f811
Sun 20:58: Building the CORE arithmetic unit for "conv3_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 288
Sun 20:58: CORE coefficient vector size: 288
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: Ifmap buffer configuration 4096 x 32
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 64
Sun 20:58: Read for key = conv3_pw depth = 64 raw data = 16384
Sun 20:58: ROM created for conv3_pw of depth 64 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@72ef05e4
Sun 20:58: Building the CORE arithmetic unit for "conv3_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 32
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 8
Sun 20:58: [ConvLayerOfmapBuffer] depth = 65536 addr_bits =    16
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv3"
Sun 20:58: 
Sun 20:58: Generating kernel conv4 ...
Sun 20:58: Instantiating kernel "conv4"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 56, output height = 56, pad = 1
Sun 20:58: Counter H = 58 W = 58
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv4" ...
Sun 20:58: Line buffer shape 3 x 56, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 8, output vector size: 72.
Sun 20:58: Number of separated line buffers: 8
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 58 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 16
Sun 20:58: Read for key = conv4_dw depth = 16 raw data = 1152
Sun 20:58: ROM created for conv4_dw of depth 16 and type {DFEVectorType: 72 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@181419c5
Sun 20:58: Building the CORE arithmetic unit for "conv4_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 72
Sun 20:58: CORE coefficient vector size: 72
Sun 20:58: CORE ofmap vector size: 8
Sun 20:58: Ifmap buffer configuration 65536 x 8
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 128
Sun 20:58: Read for key = conv4_pw depth = 128 raw data = 32768
Sun 20:58: ROM created for conv4_pw of depth 128 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@2d83bcd1
Sun 20:58: Building the CORE arithmetic unit for "conv4_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 8
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: [ConvLayerOfmapBuffer] depth =  1024 addr_bits =    10
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv4"
Sun 20:58: 
Sun 20:58: Generating kernel conv5 ...
Sun 20:58: Instantiating kernel "conv5"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 28, output height = 28, pad = 1
Sun 20:58: Counter H = 30 W = 30
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv5" ...
Sun 20:58: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 32, output vector size: 288.
Sun 20:58: Number of separated line buffers: 32
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 8
Sun 20:58: Read for key = conv5_dw depth = 8 raw data = 2304
Sun 20:58: ROM created for conv5_dw of depth 8 and type {DFEVectorType: 288 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@bd866d8
Sun 20:58: Building the CORE arithmetic unit for "conv5_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 288
Sun 20:58: CORE coefficient vector size: 288
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: Ifmap buffer configuration 1024 x 32
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 128
Sun 20:58: Read for key = conv5_pw depth = 128 raw data = 65536
Sun 20:58: ROM created for conv5_pw of depth 128 and type {DFEVectorType: 512 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@31972e11
Sun 20:58: Building the CORE arithmetic unit for "conv5_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 32
Sun 20:58: CORE coefficient vector size: 512
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth = 16384 addr_bits =    14
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv5"
Sun 20:58: 
Sun 20:58: Generating kernel conv6 ...
Sun 20:58: Instantiating kernel "conv6"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 28, output height = 28, pad = 1
Sun 20:58: Counter H = 30 W = 30
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv6" ...
Sun 20:58: Line buffer shape 3 x 28, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 30 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 16
Sun 20:58: Read for key = conv6_dw depth = 16 raw data = 2304
Sun 20:58: ROM created for conv6_dw of depth 16 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7bcbb4f7
Sun 20:58: Building the CORE arithmetic unit for "conv6_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 16384 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 512
Sun 20:58: Read for key = conv6_pw depth = 512 raw data = 131072
Sun 20:58: ROM created for conv6_pw of depth 512 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@68344fcf
Sun 20:58: Building the CORE arithmetic unit for "conv6_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv6"
Sun 20:58: 
Sun 20:58: Generating kernel conv7 ...
Sun 20:58: Instantiating kernel "conv7"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 14, output height = 14, pad = 1
Sun 20:58: Counter H = 16 W = 16
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv7" ...
Sun 20:58: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 32
Sun 20:58: Read for key = conv7_dw depth = 32 raw data = 4608
Sun 20:58: ROM created for conv7_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@78aa1e9a
Sun 20:58: Building the CORE arithmetic unit for "conv7_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 256 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 1024
Sun 20:58: Read for key = conv7_pw depth = 1024 raw data = 262144
Sun 20:58: ROM created for conv7_pw of depth 1024 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7cb59de4
Sun 20:58: Building the CORE arithmetic unit for "conv7_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth =  8192 addr_bits =    13
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv7"
Sun 20:58: 
Sun 20:58: Generating kernel conv8 ...
Sun 20:58: Instantiating kernel "conv8"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 14, output height = 14, pad = 1
Sun 20:58: Counter H = 16 W = 16
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv8" ...
Sun 20:58: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 32
Sun 20:58: Read for key = conv8_dw depth = 32 raw data = 4608
Sun 20:58: ROM created for conv8_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@671aa34e
Sun 20:58: Building the CORE arithmetic unit for "conv8_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 8192 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 1024
Sun 20:58: Read for key = conv8_pw depth = 1024 raw data = 262144
Sun 20:58: ROM created for conv8_pw of depth 1024 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@3335e5c0
Sun 20:58: Building the CORE arithmetic unit for "conv8_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 256
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv8"
Sun 20:58: 
Sun 20:58: Generating kernel conv9 ...
Sun 20:58: Instantiating kernel "conv9"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 14, output height = 14, pad = 1
Sun 20:58: Counter H = 16 W = 16
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv9" ...
Sun 20:58: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 16, output vector size: 144.
Sun 20:58: Number of separated line buffers: 16
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 32
Sun 20:58: Read for key = conv9_dw depth = 32 raw data = 4608
Sun 20:58: ROM created for conv9_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@43c5c206
Sun 20:58: Building the CORE arithmetic unit for "conv9_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 144
Sun 20:58: CORE coefficient vector size: 144
Sun 20:58: CORE ofmap vector size: 16
Sun 20:58: Ifmap buffer configuration 256 x 16
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 512
Sun 20:58: Read for key = conv9_pw depth = 512 raw data = 262144
Sun 20:58: ROM created for conv9_pw of depth 512 and type {DFEVectorType: 512 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@3cdb850
Sun 20:58: Building the CORE arithmetic unit for "conv9_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 16
Sun 20:58: CORE coefficient vector size: 512
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Sun 20:58: Connecting to output: ofmap
Sun 20:58: Compiling kernel "conv9"
Sun 20:58: 
Sun 20:58: Generating kernel conv10 ...
Sun 20:58: Instantiating kernel "conv10"
Sun 20:58: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: coeffOnChip = true
Sun 20:58: Input height = 14, output height = 14, pad = 1
Sun 20:58: Counter H = 16 W = 16
Sun 20:58: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:58: Building line buffer for "conv10" ...
Sun 20:58: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:58: Line buffer input vector size: 32, output vector size: 288.
Sun 20:58: Number of separated line buffers: 32
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:58: Size of line buffer output: 3
Sun 20:58: Number of line buffer output chunks: 3
Sun 20:58: Connecting outputs from chunk (#000) ...
Sun 20:58: Connecting outputs from chunk (#001) ...
Sun 20:58: Connecting outputs from chunk (#002) ...
Sun 20:58: Depthwise coeff ROM depth = 16
Sun 20:58: Read for key = conv10_dw depth = 16 raw data = 4608
Sun 20:58: ROM created for conv10_dw of depth 16 and type {DFEVectorType: 288 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@2cae7421
Sun 20:58: Building the CORE arithmetic unit for "conv10_dw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 288
Sun 20:58: CORE coefficient vector size: 288
Sun 20:58: CORE ofmap vector size: 32
Sun 20:58: Ifmap buffer configuration 4096 x 32
Sun 20:58: loop = false
Sun 20:58: Pointwise coeff ROM depth = 512
Sun 20:58: Read for key = conv10_pw depth = 512 raw data = 262144
Sun 20:58: ROM created for conv10_pw of depth 512 and type {DFEVectorType: 512 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@703ccfa8
Sun 20:58: Building the CORE arithmetic unit for "conv10_pw" ...
Sun 20:58: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:58: CORE ifmap vector size: 32
Sun 20:58: CORE coefficient vector size: 512
Sun 20:58: CORE ofmap vector size: 16
Sun 20:59: [ConvLayerOfmapBuffer] depth =   256 addr_bits =     8
Sun 20:59: Connecting to output: ofmap
Sun 20:59: Compiling kernel "conv10"
Sun 20:59: 
Sun 20:59: Generating kernel conv11 ...
Sun 20:59: Instantiating kernel "conv11"
Sun 20:59: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: coeffOnChip = true
Sun 20:59: Input height = 14, output height = 14, pad = 1
Sun 20:59: Counter H = 16 W = 16
Sun 20:59: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: Building line buffer for "conv11" ...
Sun 20:59: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:59: Line buffer input vector size: 16, output vector size: 144.
Sun 20:59: Number of separated line buffers: 16
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Depthwise coeff ROM depth = 32
Sun 20:59: Read for key = conv11_dw depth = 32 raw data = 4608
Sun 20:59: ROM created for conv11_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@30214ade
Sun 20:59: Building the CORE arithmetic unit for "conv11_dw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 144
Sun 20:59: CORE coefficient vector size: 144
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: Ifmap buffer configuration 256 x 16
Sun 20:59: loop = false
Sun 20:59: Pointwise coeff ROM depth = 1024
Sun 20:59: Read for key = conv11_pw depth = 1024 raw data = 262144
Sun 20:59: ROM created for conv11_pw of depth 1024 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@7bd2e14c
Sun 20:59: Building the CORE arithmetic unit for "conv11_pw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 16
Sun 20:59: CORE coefficient vector size: 256
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: [ConvLayerOfmapBuffer] depth =  8192 addr_bits =    13
Sun 20:59: Connecting to output: ofmap
Sun 20:59: Compiling kernel "conv11"
Sun 20:59: 
Sun 20:59: Generating kernel conv12 ...
Sun 20:59: Instantiating kernel "conv12"
Sun 20:59: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: coeffOnChip = true
Sun 20:59: Input height = 14, output height = 14, pad = 1
Sun 20:59: Counter H = 16 W = 16
Sun 20:59: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: Building line buffer for "conv12" ...
Sun 20:59: Line buffer shape 3 x 14, produces 1 number of 3 x 3 tiles per cycle
Sun 20:59: Line buffer input vector size: 16, output vector size: 144.
Sun 20:59: Number of separated line buffers: 16
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 16 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Depthwise coeff ROM depth = 32
Sun 20:59: Read for key = conv12_dw depth = 32 raw data = 4608
Sun 20:59: ROM created for conv12_dw of depth 32 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@6c99b2f5
Sun 20:59: Building the CORE arithmetic unit for "conv12_dw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 144
Sun 20:59: CORE coefficient vector size: 144
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: Ifmap buffer configuration 8192 x 16
Sun 20:59: loop = false
Sun 20:59: Pointwise coeff ROM depth = 2048
Sun 20:59: Read for key = conv12_pw depth = 2048 raw data = 524288
Sun 20:59: ROM created for conv12_pw of depth 2048 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@3c6171
Sun 20:59: Building the CORE arithmetic unit for "conv12_pw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 16
Sun 20:59: CORE coefficient vector size: 256
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: [ConvLayerOfmapBuffer] depth =    64 addr_bits =     6
Sun 20:59: Connecting to output: ofmap
Sun 20:59: Compiling kernel "conv12"
Sun 20:59: 
Sun 20:59: Generating kernel conv13 ...
Sun 20:59: Instantiating kernel "conv13"
Sun 20:59: T = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: coeffOnChip = true
Sun 20:59: Input height = 7, output height = 7, pad = 1
Sun 20:59: Counter H = 9 W = 9
Sun 20:59: oh is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: ow is dfeFix(32, 0, TWOSCOMPLEMENT)
Sun 20:59: Building line buffer for "conv13" ...
Sun 20:59: Line buffer shape 3 x 7, produces 1 number of 3 x 3 tiles per cycle
Sun 20:59: Line buffer input vector size: 16, output vector size: 144.
Sun 20:59: Number of separated line buffers: 16
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Initialising line buffer kernel with 3 x 9 x 1
Sun 20:59: Size of line buffer output: 3
Sun 20:59: Number of line buffer output chunks: 3
Sun 20:59: Connecting outputs from chunk (#000) ...
Sun 20:59: Connecting outputs from chunk (#001) ...
Sun 20:59: Connecting outputs from chunk (#002) ...
Sun 20:59: Depthwise coeff ROM depth = 64
Sun 20:59: Read for key = conv13_dw depth = 64 raw data = 9216
Sun 20:59: ROM created for conv13_dw of depth 64 and type {DFEVectorType: 144 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@297b4d89
Sun 20:59: Building the CORE arithmetic unit for "conv13_dw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 144
Sun 20:59: CORE coefficient vector size: 144
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: Ifmap buffer configuration 128 x 16
Sun 20:59: loop = false
Sun 20:59: Pointwise coeff ROM depth = 4096
Sun 20:59: Read for key = conv13_pw depth = 4096 raw data = 1048576
Sun 20:59: ROM created for conv13_pw of depth 4096 and type {DFEVectorType: 256 x dfeFix(8, 0, TWOSCOMPLEMENT)}: com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory@2ee798d7
Sun 20:59: Building the CORE arithmetic unit for "conv13_pw" ...
Sun 20:59: WT = dfeFix(8, 0, TWOSCOMPLEMENT)
Sun 20:59: CORE ifmap vector size: 16
Sun 20:59: CORE coefficient vector size: 256
Sun 20:59: CORE ofmap vector size: 16
Sun 20:59: [ConvLayerOfmapBuffer] depth =  4096 addr_bits =    12
Sun 20:59: Connecting to output: ofmap
Sun 20:59: Compiling kernel "conv13"
Sun 20:59: 
Sun 20:59: Generating padding kernels for DRAM access
Sun 20:59: Instantiating kernel "ifmap_unpad"
Sun 20:59: Compiling kernel "ifmap_unpad"
Sun 20:59: 
Sun 20:59: Instantiating kernel "ofmap_pad"
Sun 20:59: Compiling kernel "ofmap_pad"
Sun 20:59: 
Sun 20:59: Setting up stream connections for conv0
Sun 20:59: Setting up stream connections for conv1
Sun 20:59: Connecting ifmap <== conv0: ofmap
Sun 20:59: Setting up stream connections for conv2
Sun 20:59: Connecting ifmap <== conv1: ofmap
Sun 20:59: Setting up stream connections for conv3
Sun 20:59: Connecting ifmap <== conv2: ofmap
Sun 20:59: Setting up stream connections for conv4
Sun 20:59: Connecting ifmap <== conv3: ofmap
Sun 20:59: Setting up stream connections for conv5
Sun 20:59: Connecting ifmap <== conv4: ofmap
Sun 20:59: Setting up stream connections for conv6
Sun 20:59: Connecting ifmap <== conv5: ofmap
Sun 20:59: Setting up stream connections for conv7
Sun 20:59: Connecting ifmap <== conv6: ofmap
Sun 20:59: Setting up stream connections for conv8
Sun 20:59: Connecting ifmap <== conv7: ofmap
Sun 20:59: Setting up stream connections for conv9
Sun 20:59: Connecting ifmap <== conv8: ofmap
Sun 20:59: Setting up stream connections for conv10
Sun 20:59: Connecting ifmap <== conv9: ofmap
Sun 20:59: Setting up stream connections for conv11
Sun 20:59: Connecting ifmap <== conv10: ofmap
Sun 20:59: Setting up stream connections for conv12
Sun 20:59: Connecting ifmap <== conv11: ofmap
Sun 20:59: Setting up stream connections for conv13
Sun 20:59: Connecting ifmap <== conv12: ofmap
Sun 20:59: DRAM will be used to build the design
Sun 20:59: Setup streams for kernel "conv0"
Sun 20:59: # cycles:       306456
Sun 20:59: # ifmap stream: 150528
Sun 20:59: # ofmap stream: 401408
Sun 20:59: coeff vec size: 144
Sun 20:59: coeff stream bit width: 1152
Sun 20:59: coeff stream chunk size: 9
cp.C = 32
Sun 20:59: Setup streams for kernel "conv1"
Sun 20:59: # cycles:       103968
Sun 20:59: # ifmap stream: 401408
Sun 20:59: # ofmap stream: 802816
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 64
Sun 20:59: Setup streams for kernel "conv2"
Sun 20:59: # cycles:       207936
Sun 20:59: # ifmap stream: 802816
Sun 20:59: # ofmap stream: 401408
Sun 20:59: coeff vec size: 4608
Sun 20:59: coeff stream bit width: 36864
Sun 20:59: coeff stream chunk size: 9
cp.C = 128
Sun 20:59: Setup streams for kernel "conv3"
Sun 20:59: # cycles:       215296
Sun 20:59: # ifmap stream: 401408
Sun 20:59: # ofmap stream: 401408
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 128
Sun 20:59: Setup streams for kernel "conv4"
Sun 20:59: # cycles:       430592
Sun 20:59: # ifmap stream: 401408
Sun 20:59: # ofmap stream: 200704
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 256
Sun 20:59: Setup streams for kernel "conv5"
Sun 20:59: # cycles:       115200
Sun 20:59: # ifmap stream: 200704
Sun 20:59: # ofmap stream: 200704
Sun 20:59: coeff vec size: 4608
Sun 20:59: coeff stream bit width: 36864
Sun 20:59: coeff stream chunk size: 9
cp.C = 256
Sun 20:59: Setup streams for kernel "conv6"
Sun 20:59: # cycles:       460800
Sun 20:59: # ifmap stream: 200704
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv7"
Sun 20:59: # cycles:       262144
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv8"
Sun 20:59: # cycles:       262144
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv9"
Sun 20:59: # cycles:       131072
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 4608
Sun 20:59: coeff stream bit width: 36864
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv10"
Sun 20:59: # cycles:       131072
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 4608
Sun 20:59: coeff stream bit width: 36864
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv11"
Sun 20:59: # cycles:       262144
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 100352
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 512
Sun 20:59: Setup streams for kernel "conv12"
Sun 20:59: # cycles:       524288
Sun 20:59: # ifmap stream: 100352
Sun 20:59: # ofmap stream: 50176
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
cp.C = 1024
Sun 20:59: Setup streams for kernel "conv13"
Sun 20:59: # cycles:       331776
Sun 20:59: # ifmap stream: 50176
Sun 20:59: # ofmap stream: 50176
Sun 20:59: coeff vec size: 2304
Sun 20:59: coeff stream bit width: 18432
Sun 20:59: coeff stream chunk size: 9
Sun 21:02: Generating input files (VHDL, netlists, vendor specific IP cores)
Sun 22:17: Running back-end  build (15 phases)
Sun 22:17: (1/15) - Prepare MaxFile Data (GenerateMaxFileDataFile)
Sun 22:17: (2/15) - Synthesize DFE Modules (VivadoSynth)
Sun 22:17: Executing Synthesis Strategy VIVADO_DEFAULT
Mon 00:51: (3/15) - Generate Resource Report (VivadoResourceUsage)
Mon 00:51: (4/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Mon 00:52: (5/15) - Analyse Resource Usage (VivadoResourceCounter)
Mon 00:52: 
Mon 00:52: About to start chip vendor Map/Place/Route toolflow. This will take some time.
Mon 00:52: For this compile, we estimate this process may take longer than 1 hour.
Mon 00:52: We recommend running in simulation to verify correctness before building hardware.
Mon 00:52: 
Mon 00:52: PRELIMINARY RESOURCE USAGE
Mon 00:52: FPGA: xcVU9P-FLGB2104-2-E
Mon 00:52: Logic utilization:      986169 / 3546720 (27.81%)
Mon 00:52:   LUTs:                 135309 / 1182240 (11.45%)
Mon 00:52:   Primary FFs:          850860 / 2364480 (35.99%)
Mon 00:52: DSP blocks:               6749 / 6840    (98.67%)
Mon 00:52: Block memory (BRAM18):    1445 / 4320    (33.45%)
Mon 00:52: Block memory (URAM):       300 / 960     (31.25%)
Mon 00:52: 
Mon 00:52: (6/15) - Analyse Power Usage (PreliminaryVivadoReportPower)
Mon 00:52: 
Mon 00:52: PRELIMINARY POWER REPORT
Mon 00:52: Total On-Chip Power (W) 16.92 (budget: 91.80) 
Mon 00:52: Dynamic Power (W)       14.09 
Mon 00:52: Device Static Power(W)   2.83 
Mon 00:52: 
Mon 00:52: (7/15) - Place DFE (VivadoImplementation)
Mon 00:52: Executing the following 10 Implementation Strategies in 4 threads:
Mon 00:52:  - VIVADO_DEFAULT
Mon 00:52:  - MAXELER1
Mon 00:52:  - MAXELER2
Mon 00:52:  - MAXELER3
Mon 00:52:  - MAXELER4
Mon 00:52:  - PERFORMANCE_EARLY_BLOCK_PLACEMENT
Mon 00:52:  - PERFORMANCE_EXPLORE
Mon 00:52:  - PERFORMANCE_EXTRA_TIMING_OPT
Mon 00:52:  - PERFORMANCE_NET_DELAY_HIGH
Mon 00:52:  - PERFORMANCE_REFINE_PLACEMENT
Mon 06:26: Implementation: Strategy "VIVADO_DEFAULT" failed timing with score 582259 (best score 582259)
Mon 06:31: Implementation: Strategy "MAXELER3" met timing with score 0 (best score 0)
Mon 06:31: Implementation: Strategy "MAXELER2" was cancelled (no timing score)
Mon 06:31: Implementation: Strategy "MAXELER4" is canceled (no timing score)
Mon 06:31: Implementation: Strategy "MAXELER1" was cancelled (no timing score)
Mon 06:31: (8/15) - Generate Resource Report (VivadoResourceUsage)
Mon 06:31: (9/15) - Generate Annotated Source Code (VivadoResourceAnnotation)
Mon 06:32: (10/15) - Analyse Power Usage (FinalVivadoReportPower)
Mon 06:32: 
Mon 06:32: FINAL POWER REPORT
Mon 06:32: Total On-Chip Power (W) 17.04 (budget: 91.80) 
Mon 06:32: Dynamic Power (W)       14.21 
Mon 06:32: Device Static Power(W)   2.83 
Mon 06:32: 
Mon 06:32: (11/15) - Generate Configuration (VivadoBitgen)
Mon 06:53: (12/15) - Update Checksum (VivadoUpdateChecksum)
Mon 06:58: (13/15) - Convert Programming File (VivadoCfgfileGen)
Mon 06:58: (14/15) - Generate MaxFile (VivadoGenerateMaxFile)
Mon 06:58: (15/15) - Clean Build Directory (VivadoCleanBuildDirectory)
Mon 06:58: 
Mon 06:58: FINAL RESOURCE USAGE
Mon 06:58: FPGA: xcVU9P-FLGB2104-2-E
Mon 06:58: Logic utilization:      703237 / 3546720 (19.83%)
Mon 06:58:   LUTs:                 124360 / 1182240 (10.52%)
Mon 06:58:   Primary FFs:          578877 / 2364480 (24.48%)
Mon 06:58: DSP blocks:               6742 / 6840    (98.57%)
Mon 06:58: Block memory (BRAM18):    1445 / 4320    (33.45%)
Mon 06:58: Block memory (URAM):       300 / 960     (31.25%)
Mon 06:58: 
Mon 06:58: MaxFile: /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max (MD5Sum: daa605e18ae38e426985d109703f0e33)
Mon 06:58: Build completed: Mon Dec 27 06:58:40 GMT 2021 (took 10 hours, 0 mins, 43 secs)
cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.h /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/Maxfiles.h
cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched_backup.max
rm /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.h
rm /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max
mv /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched_backup.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max
# cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/../scratch/MobilenetV1ParSearched.h /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.h
# cp /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/../scratch/MobilenetV1ParSearched.max /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max
# rm -rf /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/../scratch
sliccompile /mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max MobilenetV1ParSearched_FREQ_300_dfe.o
Processing maxfile for MAX5_LIMA from '/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max'.
/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/clang/bin/start.sh clang -fgnu89-inline -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/dev/null" -DSLIC_NO_DESTRUCTORS -c /tmp/sliccompile_8725876950741348901/cobject/max_5799920674147754303.c -o /tmp/sliccompile_8725876950741348901/cobject/max_5799920674147754303.c.o 
gcc -fno-guess-branch-probability -pipe -O0 -std=gnu99 -Wall -Werror -frandom-seed=foo -Wno-unused-variable -Wno-unused-function -fPIC -I /vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -DMAXFILE_INC="/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results/MobilenetV1ParSearched.max" -DSLIC_NO_DESTRUCTORS -c /vol/cc/opt/maxeler/maxcompiler-2021.1/src/slicinterface/MaxFileInit.c -o max_8319514415550876061.o 
ld -r /tmp/sliccompile_8725876950741348901/cobject/max_5799920674147754303.c.o max_8319514415550876061.o -o MobilenetV1ParSearched_FREQ_300_dfe.o 
Copying .max file C object into '/mnt/ccnas2/bdp/rz3515/projects/deacon/evaluation/explore/build/mobilenet_v1_par_searched'
g++ ../../src/mobilenet_v1_par_searched/MobilenetV1ParSearchedCpuCode.cpp -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -I/mnt/ccnas2/bdp/rz3515/maxcompiler_builds/MobilenetV1ParSearched_MAIA_DFE_FREQ_300/results -DDESIGN_NAME=MobilenetV1ParSearched -c -o MobilenetV1ParSearched_FREQ_300_dfec.o
g++ -fopenmp -lrt -D_GLIBCXX_USE_CXX11_ABI=0 -O3 -std=c++11  -Wall -I/mnt/ccnas2/bdp/rz3515/cccad/opt/include -I/usr/local/include -I../src -I../src/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/runtime/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include -I/vol/cc/opt/maxeler/maxcompiler-2021.1/include/slic -I/lib/maxeleros-sim/include -I/mnt/ccnas2/bdp/rz3515/projects/deacon/lib/dfe-snippets/include -D_XOPEN_SOURCE=600 -DDESIGN_   -o MobilenetV1ParSearched_FREQ_300_dfe MobilenetV1ParSearched_FREQ_300_dfe.o MobilenetV1ParSearched_FREQ_300_dfec.o -L/mnt/ccnas2/bdp/rz3515/cccad/opt/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib -L/vol/cc/opt/maxeler/maxcompiler-2021.1/lib/maxeleros-sim/lib -L/lib/maxeleros-sim/lib -L./ -lmaxeleros -lglog -lgflags -lslic -lm -lpthread -lcurl
