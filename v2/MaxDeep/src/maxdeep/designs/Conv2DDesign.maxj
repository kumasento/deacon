package maxdeep.designs;

import com.maxeler.maxcompiler.v2.managers.custom.blocks.*;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.*;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.*;

import maxdeep.*;
import maxdeep.kernels.*;

public class Conv2DDesign {

  public static final String NAME = "CONV2D";
  public static final String CONV2D_INP_CACHE_KERNEL_NAME = "CONV2D_INP_CACHE_KERNEL";
  
  public static void initializeKernel(MaxDeepManager manager, MaxDeepEngineParameters params) {
    int freq = params.getFreq();
    int numOfPipes = params.getNumPipes();
    int kernelHeight = params.getKernelSize();
    int kernelWidth = params.getKernelSize();
    int kernelSize = kernelHeight * kernelWidth;
    int maxConvHeight = params.getMaxConvHeight();
    int maxConvWidth = params.getMaxConvWidth();
    int maxConvNumOfChannels = params.getMaxConvNumChannels();
    int maxConvNumOfFilters = params.getMaxConvNumFilters();

    manager.logMsg("Initializing CONV2D kernel ...");
    manager.logMsg("FREQ:                     %d", freq);
    manager.logMsg("NUM_PIPES:                %d", numOfPipes);
    manager.logMsg("KERNEL_HEIGHT:            %d", kernelHeight);
    manager.logMsg("KERNEL_WIDTH:             %d", kernelWidth);
    manager.logMsg("MAX_CONV_HEIGHT:          %d", maxConvHeight);
    manager.logMsg("MAX_CONV_WIDTH:           %d", maxConvWidth);
    manager.logMsg("MAX_CONV_NUM_OF_CHANNELS: %d", maxConvNumOfChannels);
    manager.logMsg("MAX_CONV_NUM_OF_FILTERS:  %d", maxConvNumOfFilters);

    manager.initializePaddingKernels(
        params, 32, 32 * kernelSize, 32);

    KernelBlock inpCache = manager.addKernel(
        new Conv2DInpCacheKernel(
          manager.makeKernelParameters(CONV2D_INP_CACHE_KERNEL_NAME),
          maxConvHeight,
          maxConvWidth,
          maxConvNumOfChannels,
          maxConvNumOfFilters,
          kernelHeight,
          kernelWidth,
          params.getDbg()));

    KernelBlock conv2d = manager.addKernel(
        new Conv2DComputeKernel(
          manager.makeKernelParameters(MaxDeepManager.CONV2D_COMPUTE_KERNEL_NAME),
          kernelHeight,
          kernelWidth,
          numOfPipes,
          params.getDbg()));

    inpCache.getInput(Conv2DInpCacheKernel.INP_NAME) <==
      manager.unpadding_inp.getOutput(UnpaddingKernel.OUT_NAME);

    inpCache.getInput(Conv2DInpCacheKernel.INP_WGT_NAME) <==
      manager.unpadding_wgt.getOutput(UnpaddingKernel.OUT_NAME);

    conv2d.getInput(Conv2DComputeKernel.INP_NAME) <==
      inpCache.getOutput(Conv2DInpCacheKernel.OUT_NAME);
    
    conv2d.getInput(Conv2DComputeKernel.WGT_NAME) <==
      inpCache.getOutput(Conv2DInpCacheKernel.OUT_WGT_NAME);

    manager.padding.getInput(PaddingKernel.INP_NAME) <==
      conv2d.getOutput(Conv2DComputeKernel.OUT_NAME);

    conv2d.setClock(manager.clk);
  }

  public static void initializeEngineInterface(EngineInterface ei, MaxDeepManager manager,
      MaxDeepEngineParameters params) {

    manager.logMsg("Initializing EngineInterface for CONV2D ...");
    
    InterfaceParam height = ei.addParam(
        "height", CPUTypes.INT64, "Height of the input fmap");
    InterfaceParam width = ei.addParam(
        "width", CPUTypes.INT64, "Width of the input fmap");
    InterfaceParam numOfChannels = ei.addParam(
        "num_of_channels", CPUTypes.INT64, "Number of input fmap channels");
    InterfaceParam numOfFilters = ei.addParam(
        "num_of_filters", CPUTypes.INT64, "Number of output fmap channels");

    InterfaceParam ZERO = ei.addConstant(0);
    InterfaceParam kernelHeight = ei.addConstant(params.getKernelSize());
    InterfaceParam kernelWidth = ei.addConstant(params.getKernelSize());
    InterfaceParam kernelSize = kernelHeight * kernelWidth;
    InterfaceParam numOfPipes = ei.addConstant(params.getNumPipes());

    InterfaceParam outHeight = height - kernelHeight + 1;
    InterfaceParam outWidth = width - kernelWidth + 1;

    InterfaceParam inpNumOfElems = height * width * numOfChannels;
    InterfaceParam wgtNumOfElems = numOfChannels * numOfFilters * kernelSize;
    InterfaceParam outNumOfElems = outHeight * outWidth * numOfChannels * numOfFilters;

    InterfaceParam burstAlignedInpNumOfElems =
      manager.getBurstAlignedNumOfElems(inpNumOfElems, CPUTypes.UINT32.sizeInBytes(), ei);
    InterfaceParam burstAlignedInpSizeInBytes =
      burstAlignedInpNumOfElems * CPUTypes.UINT32.sizeInBytes();

    InterfaceParam burstAlignedWgtNumOfElems =
      manager.getBurstAlignedNumOfElems(wgtNumOfElems, CPUTypes.UINT32.sizeInBytes(), kernelSize, ei);
    InterfaceParam burstAlignedWgtSizeInBytes =
      burstAlignedWgtNumOfElems * CPUTypes.UINT32.sizeInBytes();

    InterfaceParam burstAlignedOutNumOfElems =
      manager.getBurstAlignedNumOfElems(outNumOfElems, CPUTypes.UINT32.sizeInBytes(), ei);
    InterfaceParam burstAlignedOutSizeInBytes =
      burstAlignedOutNumOfElems * CPUTypes.UINT32.sizeInBytes();

    // Ticks
    ei.setTicks(CONV2D_INP_CACHE_KERNEL_NAME, inpNumOfElems * numOfFilters);
    ei.setTicks(MaxDeepManager.CONV2D_COMPUTE_KERNEL_NAME, outNumOfElems);
    ei.setTicks(MaxDeepManager.UNPADDING_INP_KERNEL_NAME, burstAlignedInpNumOfElems);
    ei.setTicks(MaxDeepManager.UNPADDING_WGT_KERNEL_NAME, burstAlignedWgtNumOfElems / kernelSize);
    ei.setTicks(MaxDeepManager.PADDING_KERNEL_NAME, burstAlignedOutNumOfElems);

    // Scalars
    ei.setScalar(CONV2D_INP_CACHE_KERNEL_NAME,
        Conv2DInpCacheKernel.SCALAR_HEIGHT_NAME,
        height);
    
    ei.setScalar(CONV2D_INP_CACHE_KERNEL_NAME,
        Conv2DInpCacheKernel.SCALAR_WIDTH_NAME,
        width);

    ei.setScalar(CONV2D_INP_CACHE_KERNEL_NAME,
        Conv2DInpCacheKernel.SCALAR_NUM_OF_CHANNELS_NAME,
        numOfChannels);

    ei.setScalar(CONV2D_INP_CACHE_KERNEL_NAME,
        Conv2DInpCacheKernel.SCALAR_NUM_OF_FILTERS_NAME,
        numOfFilters);
    
    ei.setScalar(MaxDeepManager.PADDING_KERNEL_NAME,
        PaddingKernel.SCALAR_NUM_INP,
        outNumOfElems);

    ei.setScalar(MaxDeepManager.PADDING_KERNEL_NAME,
        PaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedOutNumOfElems);

    ei.setScalar(MaxDeepManager.UNPADDING_INP_KERNEL_NAME,
        UnpaddingKernel.SCALAR_NUM_INP,
        inpNumOfElems);

    ei.setScalar(MaxDeepManager.UNPADDING_INP_KERNEL_NAME,
        UnpaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedInpNumOfElems);

    ei.setScalar(MaxDeepManager.UNPADDING_WGT_KERNEL_NAME,
        UnpaddingKernel.SCALAR_NUM_INP,
        wgtNumOfElems / kernelSize);

    ei.setScalar(MaxDeepManager.UNPADDING_WGT_KERNEL_NAME,
        UnpaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedWgtNumOfElems / kernelSize);

    // LMem Linear
    ei.setLMemLinear(MaxDeepManager.LMEM_INP_NAME, ZERO, burstAlignedInpSizeInBytes);
    ei.setLMemLinear(MaxDeepManager.LMEM_WGT_NAME,
        burstAlignedInpSizeInBytes,
        burstAlignedWgtSizeInBytes);
    ei.setLMemLinear(MaxDeepManager.LMEM_OUT_NAME,
        burstAlignedInpSizeInBytes + burstAlignedWgtSizeInBytes,
        burstAlignedOutSizeInBytes);
  }

  public static String getBuildName(MaxDeepEngineParameters params, String prefix,
      String suffix) {
    return String.format(
        "%s_P_%d_K_%d_%s",
        prefix,
        params.getNumPipes(),
        params.getKernelSize(),
        suffix);
  }
}
