package maxdeep;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

public class UnpaddingKernel extends Kernel {
  public static final String INP_NAME            = "UNPADDING_INP";
  public static final String OUT_NAME            = "UNPADDING_OUT";
  public static final String SCALAR_NUM_INP      = "NUM_INP";
  public static final String SCALAR_TOTAL_CYCLES = "TOTAL_CYCLES";

  public UnpaddingKernel(KernelParameters parameters, int bitWidth) {
    super(parameters);

    DFEVar nInputs = io.scalarInput(SCALAR_NUM_INP, dfeUInt(32));
    DFEVar totalCycles = io.scalarInput(SCALAR_TOTAL_CYCLES, dfeUInt(32));
    CounterChain chain = control.count.makeCounterChain();
    DFEVar cycles = chain.addCounter(totalCycles, 1);
    DFEVar unpaddingCycles = cycles >= nInputs;

    DFEVar input = io.input(INP_NAME, dfeRawBits(bitWidth));
    io.output(OUT_NAME, input, dfeRawBits(bitWidth), ~unpaddingCycles);
  }
}
