package maxdeep.lib;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;

import maxpower.kernel.KernelBinaryOp.*;
import maxpower.utils.TreeReduce;

/**
 * This dot-product kernel is for further integration with
 * other kernels.
 * 
 * Dot product is implemented with a parallelised
 * element-wise multiplication, followed by an adder
 * tree.
 *
 * @author Ruizhe Zhao
 * @since 20/05/2017
 */
public class DotProductKernelLib extends KernelLib {

  private DFEVector<DFEVar> inp;
  private DFEVector<DFEVar> wgt;
  private DFEVar out;

  /**
   * Constructor.
   *
   * @author Ruizhe Zhao
   * @since 20/05/2017
   *
   * @param owner The owner of this KernelLib
   * @param width The width of the dot-product operation
   * @param scalarType The type of each scalar value in the
   * input vectors
   */
  public DotProductKernelLib(KernelLib owner, int width,
      DFEType scalarType) {
    super(owner);

    DFEVectorType<DFEVar> vectorType =
      new DFEVectorType<DFEVar>(scalarType, width);

    // initialize vectors to be computed
    inp = vectorType.newInstance(this);
    wgt = vectorType.newInstance(this);

    // get element-wist multiplication results
    DFEVector<DFEVar> tmp = vectorType.newInstance(this);

    // connect the tmp results to multipliers
    for (int w = 0; w < width; w ++)
      tmp[w] <== inp[w] * wgt[w];

    // create output based on the scalar type
    out = scalarType.newInstance(this);

    // connect the output DFEVar to the tree reduction result
    out <== TreeReduce.reduce(
        new Add(), tmp.getElementsAsList());
  }

  public void setInput(DFEVector<DFEVar> inp) {
    this.inp <== inp;
  }

  public void setWeight(DFEVector<DFEVar> wgt) {
    this.wgt <== wgt;
  }

  public DFEVar getOutput() {
    return this.out;
  }
}
