package maxdeep;

// import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
// import com.maxeler.maxcompiler.v2.managers.custom.CustomManager.LMemFrequency;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
// import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.*;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.*;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;
// import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

class MaxDeepManager extends CustomManager {

  /**
   * LMem related members
   */
  protected LMemInterface iface;
  protected LMemCommandGroup group;

  /**
   * Manager clocks
   */
  public static final String DEFAULT_CLK_NAME = "DEFAULT_STREAM_CLOCK";
  private ManagerClock clk;

  /**
   * Kernel instance names
   */
  public static final String LOOPBACK_KERNEL_NAME = "LOOPBACK_KERNEL";

  public MaxDeepManager(MaxDeepEngineParameters params) {
    super(params);

    initializeLMemInterface();
    initializeManagerClocks(params);

    if (params.getDesignName().equals("LOOPBACK"))
      initializeLoopbackKernel(params);
    else
      throw new IllegalArgumentException(
          String.format("Design name \"%s\" cannot be recognized",
            params.getDesignName()));
  }

  /**
   * Initialize the LMemInterface within this manager.
   *
   * @author Ruizhe Zhao
   * @since 16/05/2017
   */
  private void initializeLMemInterface() {
    iface = addLMemInterface();
    group = iface.addCommandGroup(
        "control", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
  }

  private void initializeManagerClocks(MaxDeepEngineParameters params) {
    clk = generateStreamClock(DEFAULT_CLK_NAME, params.getFreq());
  }

  /**
   * Create a LoopbackKernel instance, and connects it
   * to the LMem interface.
   * @author Ruizhe Zhao
   * @since 16/05/2017
   */
  private void initializeLoopbackKernel(MaxDeepEngineParameters params) {
    KernelBlock loopback = addKernel(
        new LoopbackKernel(
          makeKernelParameters(MaxDeepManager.LOOPBACK_KERNEL_NAME)));
     
    ManagerUtils.addLinearStreamFromLMemToKernel(group, loopback, LoopbackKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromLMemToKernel(group, loopback, LoopbackKernel.WGT_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(group, loopback, LoopbackKernel.OUT_NAME);

    loopback.setClock(clk);
  }

  /**
   * Create an engine interface for the loopback test.
   *
   * @author Ruizhe Zhao
   * @since 16/05/2017
   * @param ei Engine interface to be updated
   */
  private void initializeEngineInterfaceForLoopback(EngineInterface ei) {
    InterfaceParam N =
      ei.addParam(
          "num_elems",
          CPUTypes.INT32,
          "Number of elements to be transferred");
    InterfaceParam ZERO = ei.addConstant(0);
    InterfaceParam sizeInBytes = N * CPUTypes.UINT32.sizeInBytes();

    ei.setTicks(MaxDeepManager.LOOPBACK_KERNEL_NAME, N);
    ei.setLMemLinear(LoopbackKernel.INP_NAME, ZERO, sizeInBytes);
    ei.setLMemLinear(LoopbackKernel.WGT_NAME, sizeInBytes, sizeInBytes);
    ei.setLMemLinear(LoopbackKernel.OUT_NAME, 2 * sizeInBytes, sizeInBytes);
  }

  public EngineInterface interfaceDefault(MaxDeepEngineParameters params) {
    EngineInterface ei = new EngineInterface();

    if (params.getDesignName().equals("LOOPBACK"))
      initializeEngineInterfaceForLoopback(ei);
    else
      throw new IllegalArgumentException(
          String.format("Design name \"%s\" cannot be recognized",
            params.getDesignName()));

    ManagerUtils.ignoreLMemStreams(ei);
    return ei;
  }

  public static void main(String [] args) {
    MaxDeepEngineParameters params = new MaxDeepEngineParameters(args);
    MaxDeepManager manager = new MaxDeepManager(params);

    manager.createSLiCinterface(ManagerUtils.dramWrite(manager, manager.iface));
    manager.createSLiCinterface(ManagerUtils.dramRead(manager, manager.iface));
    manager.createSLiCinterface(manager.interfaceDefault(params));

    ManagerUtils.debug(manager);
    // NOTE: Please don't uncomment this line of code until you know
    // what you are doing!!!
    // ManagerUtils.setDRAMMaxDeviceFrequency(manager, params);

    /**
     * NOTE: Set the DRAM frequency to 400MHz to avoid performance
     * bottleneck at the memory controller.
     */
    ManagerUtils.setDRAMFreq(manager, params, 400);
    ManagerUtils.setFullBuild(manager, BuildConfig.Effort.HIGH, 4, 4);

    manager.build();
  }
}
