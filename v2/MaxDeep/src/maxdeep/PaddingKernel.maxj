package maxdeep;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

// pads the inputs with 0 after nInputs have been processed
public class PaddingKernel extends Kernel {
  public static final String INP_NAME            = "PADDING_INP";
  public static final String OUT_NAME            = "PADDING_OUT";
  public static final String SCALAR_NUM_INP      = "NUM_INP";
  public static final String SCALAR_TOTAL_CYCLES = "TOTAL_CYCLES";

  protected PaddingKernel(KernelParameters parameters, boolean dbg) {
    super(parameters);

    DFEVar nInputs = io.scalarInput(SCALAR_NUM_INP, dfeUInt(32));
    DFEVar totalCycles = io.scalarInput(SCALAR_TOTAL_CYCLES, dfeUInt(32));

    CounterChain chain = control.count.makeCounterChain();
    DFEVar cycles = chain.addCounter(totalCycles, 1);
    DFEVar paddingCycles = cycles >= nInputs;

    DFEVar input = io.input(INP_NAME, dfeUInt(32), ~paddingCycles);
    DFEVar out = paddingCycles ? 0 : input;
    io.output(OUT_NAME, out, dfeUInt(32));

    if (dbg) {
      debug.simPrintf("PADDING: %d (%d) nInputs %d\n", cycles, totalCycles, nInputs);
    }
  }
}
