package maxdeep;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;

import maxpower.kernel.KernelBinaryOp.*;
import maxpower.utils.TreeReduce;

/**
 * This kernel is a temporary one that will be used for discovering
 * the relationship between the bandwidth and the performance, and 
 * the trade-off while using multi-pumping.
 *
 * This kernel has two inputs: an INP stream that takes one element
 * in each cycle, and a WGT stream that takes P elements each M cycles.
 *
 * @author Ruizhe Zhao
 * @since 19/05/2017
 */
public class MultArrayKernel extends Kernel {

  public static final String INP_NAME = "MULT_ARRAY_KERNEL_INP";
  public static final String WGT_NAME = "MULT_ARRAY_KERNEL_WGT";
  public static final String OUT_NAME = "MULT_ARRAY_KERNEL_OUT";

  /**
   * Constructor.
   *
   * @param params kernel parameters
   * @param P number of parallel units
   */
  public MultArrayKernel(KernelParameters params, int P, boolean dbg) {
    super(params);

    // Declare types
    DFEType scalarType = dfeUInt(32);
    DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(scalarType, P);

    // Take two inputs from previous kernels
    DFEVar inp = io.input(INP_NAME, scalarType);
    DFEVector<DFEVar> wgt = io.input(WGT_NAME, vectorType);
    io.forceInputsTogether(INP_NAME, WGT_NAME);

    // Initialize a temporary result vector
    DFEVector<DFEVar> multResult = vectorType.newInstance(this);

    // Connect registers to an array of multipliers
    for (int i = 0; i < P; i ++)
      multResult[i] <== inp * wgt[i];

    // Use an adder tree to merge all the results
    DFEVar out = TreeReduce.reduce(new Add(), multResult.getElementsAsList());

    // Give an output.
    io.output(OUT_NAME, out, scalarType);
    
    if (dbg) {
      debug.simPrintf("%u %KObj% = %u\n", inp, wgt, out);
    }
  }
}
