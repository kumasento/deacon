INCLUDE "prelude.rby".
INCLUDE "btree.rby".
INCLUDE "conv2d.rby".
INCLUDE "drop2d.rby".
INCLUDE "lbuf.rby".
INCLUDE "cnt.rby".
INCLUDE "dotprod.rby".
INCLUDE "util.rby".

# how could make bundle work on generic
convT h w k = lbuf k w; (group k k)^~1.

convG pf pc = group pf pc.

# because ruby doesnt support mfork on list
convR pf pc h w k = map pc (mfork pf);
                    tran pc pf;
                    (convG pf pc)^~1;
                    map (pf * pc) (convT h w k).

convS pf pc c h w k = map pf (
                   loop (
                     add; 
                     (DI 0)^((h-k+1)*(w-k+1));
                     fork;
                     snd (
                       pi1^~1;
                       snd 0;
                       pi2^~1;
                       fst (pc; (cnt c); pi1^~1; snd (c-pc); eq);
                       muxr
                     )
                   )
                 );
                 map pf (bundle ((h - k + 1) * (w - k + 1))).

conv pf pc c h w k = ( [ ( convR pf pc h w k),
                         ( ( convG pf pc )^~1;
                           ( map (pf*pc)
                               ( map (k*k)
                                   (mfork (h*w); inv_bundle (h*w)))))
                       ];
                       zip (pf * pc);
                       map (pf * pc) (dotprod (k*k) (k*k));
                       group pf pc;
                       map pf (pbrt pc add);
                       map pf (
                       LET oh = h - k + 1 IN (
                       LET ow = w - k + 1 IN (
                         loop (
                           add; (DI 0)^(oh*ow); fork;
                           reset ((c/pc)*oh*ow)
                         );
                         AD^(oh*ow);
                         ( bundle (c/pc*oh*ow);
                           (drop ((c/pc-1)*oh*ow) (c/pc*oh*ow)); 
                           inv_bundle (oh*ow) )
                       )
                       END )
                       END )
                     ).
