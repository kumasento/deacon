package com.custom_computing_ic.maxdeep.manager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.custom_computing_ic.dfe_snippets.kernels.PaddingKernel;
import com.custom_computing_ic.dfe_snippets.kernels.UnpaddingKernel;
import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters.Type;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerWrapKernel;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import conv.ConvLayerEngineParameters;

public class ConvLayerManagerUtils {

  public static final String IFMAP_NAME             = "ifmap";
  public static final String OFMAP_NAME             = "ofmap";
  public static final String COEFF_PREFIX           = "coeff";
  public static final String DEPTHWISE_COEFF_PREFIX = "depthwise_coeff";
  public static final String POINTWISE_COEFF_PREFIX = "pointwise_coeff";

  public static InterfaceParam getBurstAlignedNumElems(InterfaceParam numElems,
      int sizeInBytes, InterfaceParam burstFactor, EngineInterface ei) {
    InterfaceParam burstSize = ei.addConstant(384) * burstFactor;
    burstSize = burstSize.cast(CPUTypes.INT64);

    InterfaceParam totalSizeInBytes = numElems * sizeInBytes;

    InterfaceParam burstAlignedTotalSizeInBytes =
        InterfaceMath.ceil(
            totalSizeInBytes.cast(CPUTypes.DOUBLE)
                / burstSize.cast(CPUTypes.DOUBLE)).cast(CPUTypes.INT64)
            * burstSize;

    InterfaceParam burstAlignedNumElems =
        burstAlignedTotalSizeInBytes / sizeInBytes;

    return burstAlignedNumElems;
  }

  public static Map<String, KernelBlock> createKernelBlocks(CustomManager mgr,
      ConvLayerParameters cp, boolean useDRAM) {
    List<ConvLayerParameters> cps = new ArrayList<ConvLayerParameters>();
    cps.add(cp);

    return createKernelBlocks(mgr, cps, useDRAM);
  }

  /**
   * Create kernel blocks and connect them to streams
   * 
   * TODO: should not only accept {@link ConvLayerParameters}
   * 
   * @param mgr
   * @param cps
   * @return
   */
  public static Map<String, KernelBlock> createKernelBlocks(CustomManager mgr,
      List<ConvLayerParameters> cps, boolean useDRAM) {
    Map<String, KernelBlock> knls = new HashMap<String, KernelBlock>();

    // create computing blocks
    for (ConvLayerParameters cp : cps) {
      String knlName = getKernelName(cp);
      knls.put(knlName, mgr.addKernel(new ConvLayerWrapKernel(mgr
          .makeKernelParameters(knlName), cp)));
    }

    // create padding blocks
    Map<String, KernelBlock> padKnls = null;
    if (useDRAM) {
      padKnls = createPaddingKernels(mgr, cps);
    }

    KernelBlock knl = null;

    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);
      knl = knls.get(getKernelName(cp));

      // connect ifmap
      if (i == 0) {

        if (useDRAM) {
          KernelBlock ifmapUnpadKnl = padKnls.get(getIfmapUnpadKernelName());
          // connect ifmap to the output of unpad kernel
          knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
              ifmapUnpadKnl.getOutput(UnpaddingKernel.OUT_NAME));
        } else {
          knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
              mgr.addStreamFromCPU(IFMAP_NAME));
        }

      } else {
        knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
            knls.get(i - 1).getOutput(ConvLayerWrapKernel.OFMAP_NAME));
      }

      // connect coeff
      if (cp.type == Type.STANDARD) {

        if (useDRAM) {
          KernelBlock coeffUnpadKnl = padKnls.get(getCoeffUnpadKernelName(cp));
          knl.getInput(ConvLayerWrapKernel.COEFF_NAME).connect(
              coeffUnpadKnl.getOutput(UnpaddingKernel.OUT_NAME));
        } else {
          knl.getInput(ConvLayerWrapKernel.COEFF_NAME).connect(
              mgr.addStreamFromCPU(COEFF_PREFIX + "_" + i));
        }

      } else if (cp.type == Type.DEPTHWISE_SEPARABLE) {

        if (useDRAM) {

          KernelBlock depthCoeffUnpadKnl =
              padKnls.get(getDepthwiseCoeffUnpadKernelName(cp));
          knl.getInput(ConvLayerWrapKernel.DEPTHWISE_COEFF_NAME).connect(
              depthCoeffUnpadKnl.getOutput(UnpaddingKernel.OUT_NAME));

          KernelBlock pointCoeffUnpadKnl =
              padKnls.get(getPointwiseCoeffUnpadKernelName(cp));
          knl.getInput(ConvLayerWrapKernel.POINTWISE_COEFF_NAME).connect(
              pointCoeffUnpadKnl.getOutput(UnpaddingKernel.OUT_NAME));

        } else {

          knl.getInput(ConvLayerWrapKernel.DEPTHWISE_COEFF_NAME).connect(
              mgr.addStreamFromCPU(DEPTHWISE_COEFF_PREFIX + "_" + i));
          knl.getInput(ConvLayerWrapKernel.POINTWISE_COEFF_NAME).connect(
              mgr.addStreamFromCPU(POINTWISE_COEFF_PREFIX + "_" + i));

        }

      } else {
        throw new IllegalArgumentException("type is not supported");
      }

      // knl.getInput(ConvLayerWrapKernel.COEFF_NAME).connect(
      // mgr.addStreamFromCPU(COEFF_PREFIX + "_" + i));
    }

    if (useDRAM) {
      KernelBlock ofmapPadKnl = padKnls.get(getOfmapPadKernelName());
      ofmapPadKnl.getInput(PaddingKernel.INP_NAME).connect(
          knl.getOutput(OFMAP_NAME));
    } else {
      mgr.addStreamToCPU(OFMAP_NAME).connect(knl.getOutput(OFMAP_NAME));
    }

    return knls;
  }

  /**
   * Create padding and unpadding kernel blocks
   * 
   * @param mgr
   * @param cps
   */
  public static Map<String, KernelBlock> createPaddingKernels(
      CustomManager mgr, List<ConvLayerParameters> cps) {
    Map<String, KernelBlock> knls = new HashMap<String, KernelBlock>();

    // create unpadding kernels for coefficients
    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);

      if (cp.type == Type.STANDARD) {

        String knlName = getCoeffUnpadKernelName(cp);
        KernelBlock knl =
            mgr.addKernel(new UnpaddingKernel(
                mgr.makeKernelParameters(knlName), cp.getCoeffStreamBitWidth(),
                cp.dbg));
        knls.put(knlName, knl);

      } else if (cp.type == Type.DEPTHWISE_SEPARABLE) {

        String depthwiseKnlName = getDepthwiseCoeffUnpadKernelName(cp);
        String pointwiseKnlName = getPointwiseCoeffUnpadKernelName(cp);

        KernelBlock depthwiseKnl =
            mgr.addKernel(new UnpaddingKernel(mgr
                .makeKernelParameters(depthwiseKnlName), cp
                .getDepthwiseCoeffStreamBitWidth(), cp.dbg));
        knls.put(depthwiseKnlName, depthwiseKnl);

        KernelBlock pointwiseKnl =
            mgr.addKernel(new UnpaddingKernel(mgr
                .makeKernelParameters(pointwiseKnlName), cp
                .getPointwiseCoeffStreamBitWidth(), cp.dbg));
        knls.put(pointwiseKnlName, pointwiseKnl);

      } else {
        throw new IllegalArgumentException("type is not supported");
      }
    }

    ConvLayerParameters cpf = cps.get(0);
    ConvLayerParameters cpl = cps.get(cps.size() - 1);

    String ifmapUnpadKnlName = getIfmapUnpadKernelName();
    KernelBlock ifmapUnpadKnl =
        mgr.addKernel(new UnpaddingKernel(mgr
            .makeKernelParameters(ifmapUnpadKnlName), cpf
            .getIfmapStreamBitWidth(), cpf.dbg));
    knls.put(ifmapUnpadKnlName, ifmapUnpadKnl);

    String ofmapPadKnlName = getOfmapPadKernelName();
    KernelBlock ofmapPadKnl =
        mgr.addKernel(new PaddingKernel(mgr
            .makeKernelParameters(ofmapPadKnlName), cpl
            .getOfmapStreamBitWidth(), cpl.dbg));
    knls.put(ofmapPadKnlName, ofmapPadKnl);

    // setup connections to the LMem
    LMemInterface iface = mgr.addLMemInterface();
    LMemCommandGroup groupIfmap =
        iface.addCommandGroup(
            "GROUP_IFMAP",
            LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
    LMemCommandGroup groupOfmap =
        iface.addCommandGroup(
            "GROUP_OFMAP",
            LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);

      if (cp.type == Type.STANDARD) {
        LMemCommandGroup groupCoeff =
            iface.addCommandGroup(
                "GROUP_COEFF",
                LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        String coeffUnpadKnlName = getCoeffUnpadKernelName(cp);
        KernelBlock coeffUnpadKnl = knls.get(coeffUnpadKnlName);

        ManagerUtils.addLinearStreamFromLMemToKernel(
            groupCoeff,
            coeffUnpadKnl,
            COEFF_PREFIX + "_" + i,
            UnpaddingKernel.INP_NAME);

      } else if (cp.type == Type.DEPTHWISE_SEPARABLE) {

        LMemCommandGroup groupDepthCoeff =
            iface.addCommandGroup(
                "GROUP_DEPTH_COEFF",
                LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        String depthwiseKnlName = getDepthwiseCoeffUnpadKernelName(cp);
        KernelBlock depthwiseCoeffUnpadKnl = knls.get(depthwiseKnlName);

        ManagerUtils.addLinearStreamFromLMemToKernel(
            groupDepthCoeff,
            depthwiseCoeffUnpadKnl,
            DEPTHWISE_COEFF_PREFIX + "_" + i,
            UnpaddingKernel.INP_NAME);

        LMemCommandGroup groupPointCoeff =
            iface.addCommandGroup(
                "GROUP_POINT_COEFF",
                LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
        String pointwiseKnlName = getPointwiseCoeffUnpadKernelName(cp);
        KernelBlock pointwiseCoeffUnpadKnl = knls.get(pointwiseKnlName);

        ManagerUtils.addLinearStreamFromLMemToKernel(
            groupPointCoeff,
            pointwiseCoeffUnpadKnl,
            POINTWISE_COEFF_PREFIX + "_" + i,
            UnpaddingKernel.INP_NAME);
      } else {
        throw new IllegalArgumentException("type is not supported");
      }
    }

    ManagerUtils.addLinearStreamFromLMemToKernel(
        groupIfmap,
        ifmapUnpadKnl,
        IFMAP_NAME,
        UnpaddingKernel.INP_NAME);
    ManagerUtils.addLinearStreamFromKernelToLMem(
        groupOfmap,
        ofmapPadKnl,
        PaddingKernel.OUT_NAME,
        OFMAP_NAME);

    return knls;
  }

  public static String getDepthwiseCoeffUnpadKernelName(ConvLayerParameters cp) {
    return String.format("%s_depthwise_coeff_unpad", getKernelName(cp));
  }

  public static String getPointwiseCoeffUnpadKernelName(ConvLayerParameters cp) {
    return String.format("%s_pointwise_coeff_unpad", getKernelName(cp));
  }

  public static String getCoeffUnpadKernelName(ConvLayerParameters cp) {
    return String.format("%s_coeff_unpad", getKernelName(cp));
  }

  public static String getIfmapUnpadKernelName() {
    return "ifmap_unpad";
  }

  public static String getOfmapPadKernelName() {
    return "ofmap_pad";
  }

  public static void setupStreams(EngineInterface ei, ConvLayerParameters cp,
      InterfaceParam batchSize, boolean useDRAM) {
    List<ConvLayerParameters> cps = new ArrayList<ConvLayerParameters>();
    cps.add(cp);

    setupStreams(ei, cps, batchSize, useDRAM);
  }

  /**
   * Set stream size in the engine interface
   * 
   * @param ei
   * @param cps
   * @param batchSize
   */
  public static void setupStreams(EngineInterface ei,
      List<ConvLayerParameters> cps, InterfaceParam batchSize, boolean useDRAM) {
    if (useDRAM) {

      InterfaceParam baseAddr;
      baseAddr = setupIfmapStream(ei, cps.get(0), batchSize);
      for (int i = 0; i < cps.size(); i++) {
        ConvLayerParameters cp = cps.get(i);

        ei.setTicks(getKernelName(cp), cp.getNumCycles() * batchSize);

        if (cp.type == Type.STANDARD)
          baseAddr = setupCoeffStream(ei, cps.get(i), i, batchSize, baseAddr);
        else if (cp.type == Type.DEPTHWISE_SEPARABLE) {
          baseAddr =
              setupCoeffStream(ei, cps.get(i), i, batchSize, baseAddr, true);
          baseAddr =
              setupCoeffStream(ei, cps.get(i), i, batchSize, baseAddr, false);
        } else {
          throw new IllegalArgumentException("type is not supported");
        }
      }

      setupOfmapStream(ei, cps.get(cps.size() - 1), batchSize, baseAddr);

    } else {

      for (int i = 0; i < cps.size(); i++) {
        ConvLayerParameters cp = cps.get(i);
        ei.setTicks(getKernelName(cp), cp.getNumCycles() * batchSize);

        if (cp.type == Type.STANDARD)
          ei.setStream(
              COEFF_PREFIX + "_" + i,
              cp.getCPUTypes(),
              cp.getCoeffStreamSize() * batchSize);
        else if (cp.type == Type.DEPTHWISE_SEPARABLE) {
          ei.setStream(
              DEPTHWISE_COEFF_PREFIX + "_" + i,
              cp.getCPUTypes(),
              cp.getDepthwiseCoeffStreamSize() * batchSize);
          ei.setStream(
              POINTWISE_COEFF_PREFIX + "_" + i,
              cp.getCPUTypes(),
              cp.getPointwiseCoeffStreamSize() * batchSize);
        } else {
          throw new IllegalArgumentException("type is not supported");
        }
      }

      ConvLayerParameters cpf = cps.get(0);
      ConvLayerParameters cpl = cps.get(cps.size() - 1);

      ei.setStream(IFMAP_NAME, cpf.getCPUTypes(), cpf.getIfmapStreamSize()
          * batchSize);
      ei.setStream(OFMAP_NAME, cpl.getCPUTypes(), cpl.getOfmapStreamSize()
          * batchSize);

    }
  }

  public static InterfaceParam setupIfmapStream(EngineInterface ei,
      ConvLayerParameters cp, InterfaceParam batchSize) {

    String ifmapUnpadKnlName = getIfmapUnpadKernelName();
    InterfaceParam ifmapNumElems =
        ei.addConstant(cp.getIfmapStreamNumElems()).cast(CPUTypes.INT64);
    ifmapNumElems *= batchSize;

    InterfaceParam burstFactor =
        ei.addConstant(cp.getIfmapVecSize()).cast(CPUTypes.INT64);
    InterfaceParam burstAlignedIfmapNumElems =
        getBurstAlignedNumElems(
            ifmapNumElems,
            cp.getCPUTypes().sizeInBytes(),
            burstFactor,
            ei);
    InterfaceParam burstAlignedIfmapSize =
        burstAlignedIfmapNumElems * cp.getCPUTypes().sizeInBytes();

    ei.setScalar(
        ifmapUnpadKnlName,
        UnpaddingKernel.SCALAR_NUM_INP,
        ifmapNumElems / burstFactor);
    ei.setScalar(
        ifmapUnpadKnlName,
        UnpaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedIfmapNumElems / burstFactor);

    ei.setTicks(ifmapUnpadKnlName, burstAlignedIfmapNumElems / burstFactor);

    InterfaceParam ZERO = ei.addConstant(0).cast(CPUTypes.INT64);
    ei.setLMemLinear(IFMAP_NAME, ZERO, burstAlignedIfmapSize);

    return burstAlignedIfmapSize;
  }

  public static InterfaceParam setupCoeffStream(EngineInterface ei,
      ConvLayerParameters cp, int index, InterfaceParam batchSize,
      InterfaceParam baseAddr, boolean isDepthwise) {

    String knlName =
        (isDepthwise)
            ? getDepthwiseCoeffUnpadKernelName(cp)
            : getPointwiseCoeffUnpadKernelName(cp);
    long numElemsValue =
        (isDepthwise) ? cp.getDepthwiseCoeffStreamNumElems() : cp
            .getPointwiseCoeffStreamNumElems();
    InterfaceParam numElems =
        ei.addConstant(numElemsValue).cast(CPUTypes.INT64);
    numElems *= batchSize;

    int burstFactorSize =
        (isDepthwise) ? (cp.PC * cp.K * cp.K) : (cp.PC * cp.PF);
    InterfaceParam burstFactor =
        ei.addConstant(burstFactorSize).cast(CPUTypes.INT64);

    InterfaceParam burstAlignedNumElems =
        getBurstAlignedNumElems(
            numElems,
            cp.getCPUTypes().sizeInBytes(),
            burstFactor,
            ei);
    InterfaceParam burstAlignedSize =
        burstAlignedNumElems * cp.getCPUTypes().sizeInBytes();

    ei.setScalar(knlName, UnpaddingKernel.SCALAR_NUM_INP, numElems
        / burstFactor);
    ei.setScalar(
        knlName,
        UnpaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedNumElems / burstFactor);

    InterfaceParam numTicks =
        (isDepthwise)
            ? (burstAlignedNumElems / burstFactor)
            : (burstAlignedNumElems / burstFactor);
    ei.setTicks(knlName, numTicks);

    String prefix =
        (isDepthwise) ? DEPTHWISE_COEFF_PREFIX : POINTWISE_COEFF_PREFIX;
    ei.setLMemLinear(prefix + "_" + index, baseAddr, burstAlignedSize);

    return baseAddr + burstAlignedSize;
  }

  public static InterfaceParam setupCoeffStream(EngineInterface ei,
      ConvLayerParameters cp, int index, InterfaceParam batchSize,
      InterfaceParam baseAddr) {

    String knlName = getCoeffUnpadKernelName(cp);
    InterfaceParam numElems =
        ei.addConstant(cp.getCoeffStreamNumElems()).cast(CPUTypes.INT64);
    numElems *= batchSize;

    InterfaceParam burstFactor =
        ei.addConstant(cp.getCoeffVecSize()).cast(CPUTypes.INT64);
    InterfaceParam burstAlignedNumElems =
        getBurstAlignedNumElems(
            numElems,
            cp.getCPUTypes().sizeInBytes(),
            burstFactor,
            ei);
    InterfaceParam burstAlignedSize =
        burstAlignedNumElems * cp.getCPUTypes().sizeInBytes();

    ei.setScalar(knlName, UnpaddingKernel.SCALAR_NUM_INP, numElems
        / burstFactor);
    ei.setScalar(
        knlName,
        UnpaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedNumElems / burstFactor);

    ei.setTicks(knlName, burstAlignedNumElems / burstFactor);

    ei.setLMemLinear(COEFF_PREFIX + "_" + index, baseAddr, burstAlignedSize);

    return baseAddr + burstAlignedSize;
  }

  public static InterfaceParam
      setupOfmapStream(EngineInterface ei, ConvLayerParameters cp,
          InterfaceParam batchSize, InterfaceParam baseAddr) {
    String knlName = getOfmapPadKernelName();
    InterfaceParam numElems =
        ei.addConstant(cp.getOfmapStreamNumElems()).cast(CPUTypes.INT64);
    numElems *= batchSize;

    InterfaceParam burstFactor =
        ei.addConstant(cp.getOfmapVecSize()).cast(CPUTypes.INT64);
    InterfaceParam burstAlignedNumElems =
        getBurstAlignedNumElems(
            numElems,
            cp.getCPUTypes().sizeInBytes(),
            burstFactor,
            ei);
    InterfaceParam burstAlignedSize =
        burstAlignedNumElems * cp.getCPUTypes().sizeInBytes();

    ei.setScalar(knlName, PaddingKernel.SCALAR_NUM_INP, numElems / burstFactor);
    ei.setScalar(
        knlName,
        PaddingKernel.SCALAR_TOTAL_CYCLES,
        burstAlignedNumElems / burstFactor);

    ei.setTicks(knlName, burstAlignedNumElems / burstFactor);

    ei.setLMemLinear(OFMAP_NAME, baseAddr, burstAlignedSize);

    return baseAddr + burstAlignedNumElems;
  }

  public static void setupConstants(CustomManager mgr, ConvLayerParameters cp,
      ConvLayerEngineParameters ep) {
    List<ConvLayerParameters> cps = new ArrayList<ConvLayerParameters>();
    cps.add(cp);

    setupConstants(mgr, cps, ep);
  }

  public static void setupConstants(CustomManager mgr,
      List<ConvLayerParameters> cps, ConvLayerEngineParameters ep) {

    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);

      String name = cp.name;

      mgr.addMaxFileConstant(name + "_H", cp.H);
      mgr.addMaxFileConstant(name + "_W", cp.W);
      mgr.addMaxFileConstant(name + "_C", cp.C);
      mgr.addMaxFileConstant(name + "_F", cp.F);
      mgr.addMaxFileConstant(name + "_K", cp.K);
    }

    mgr.addMaxFileConstant("USE_DRAM", ep.getUseDRAM() ? 1 : 0);
  }

  public static String getKernelName(ConvLayerParameters cp) {
    return cp.name;
  }

}
