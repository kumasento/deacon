package com.custom_computing_ic.maxdeep.manager;

import java.util.ArrayList;
import java.util.List;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerWrapKernel;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;

public class ManagerUtils {

  public static final String IFMAP_NAME   = "ifmap";
  public static final String OFMAP_NAME   = "ofmap";
  public static final String COEFF_PREFIX = "coeff";

  public static void setupStreams(EngineInterface ei,
      List<ConvLayerParameters> cps) {

    ConvLayerParameters cp = null;
    for (int i = 0; i < cps.size(); i++) {
      cp = cps.get(i);
      if (i == 0)
        ei.setStream("ifmap", cp.getCPUTypes(), cp.getIfmapStreamSize());
      ei.setStream("coeff_" + i, cp.getCPUTypes(), cp.getCoeffStreamSize());
    }
    ei.setStream("ofmap", cp.getCPUTypes(), cp.getOfmapStreamSize());
  }

  /**
   * Create kernel blocks and connect them to streams
   * 
   * TODO: should not only accept {@link ConvLayerParameters}
   * 
   * @param mgr
   * @param cps
   * @return
   */
  public static List<KernelBlock> createKernelBlocks(CustomManager mgr,
      List<ConvLayerParameters> cps) {
    List<KernelBlock> knls = new ArrayList<KernelBlock>();

    for (ConvLayerParameters cp : cps)
      knls.add(mgr.addKernel(new ConvLayerWrapKernel(mgr
          .makeKernelParameters(getKernelName(cp)), cp)));

    KernelBlock knl = null;
    for (int i = 0; i < cps.size(); i++) {
      knl = knls.get(i);
      if (i == 0)
        knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
            mgr.addStreamFromCPU(IFMAP_NAME));
      else
        knl.getInput(ConvLayerWrapKernel.IFMAP_NAME).connect(
            knls.get(i - 1).getOutput(ConvLayerWrapKernel.OFMAP_NAME));

      knl.getInput(ConvLayerWrapKernel.COEFF_NAME).connect(
          mgr.addStreamFromCPU(COEFF_PREFIX + "_" + i));
    }

    mgr.addStreamToCPU(OFMAP_NAME).connect(knl.getOutput(OFMAP_NAME));

    return knls;
  }

  public static void setupKernelTicks(EngineInterface ei,
      List<ConvLayerParameters> cps) {

    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);
      String knlName = getKernelName(cp);

      ei.setTicks(knlName, cp.getNumCycles());
    }

  }

  public static void setupConstants(CustomManager mgr,
      List<ConvLayerParameters> cps) {
    for (int i = 0; i < cps.size(); i++) {
      ConvLayerParameters cp = cps.get(i);

      String name = cp.name;

      mgr.addMaxFileConstant(name + "_H", cp.H);
      mgr.addMaxFileConstant(name + "_W", cp.W);
      mgr.addMaxFileConstant(name + "_C", cp.C);
      mgr.addMaxFileConstant(name + "_F", cp.F);
      mgr.addMaxFileConstant(name + "_K", cp.K);
    }
  }

  public static String getKernelName(ConvLayerParameters cp) {
    return cp.name;
  }

}
