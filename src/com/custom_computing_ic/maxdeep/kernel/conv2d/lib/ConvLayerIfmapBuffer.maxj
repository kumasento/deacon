package com.custom_computing_ic.maxdeep.kernel.conv2d.lib;

import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters.CompSeq;
import com.custom_computing_ic.maxdeep.kernel.conv2d.ConvLayerParameters.Type;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelBase;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.RamWriteMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Buffer for input feature map stream.
 * 
 * HOW TO USE:
 * 
 * <pre>
 * ConvLayerParameters cp = ...;
 * ConvLayerIfmapBuffer ibuf = new ConvLayerIfmapBuffer(getKernel(), cp,
 * scalarT); dataOut <== ibuf.port(data, addr, writeEn);
 * </pre>
 * 
 * @author Ruizhe Zhao
 * 
 */
public class ConvLayerIfmapBuffer extends ConvLayerBaseFmapBuffer {
  private final ConvLayerParameters cp;

  private final DFEType scalarT;
  private final DFEVectorType<DFEVar> portVecT;
  private final DFEType addrT;

  private final Memory<DFEVector<DFEVar>> mem;
  private final DFEVector<DFEVar> port;
  private final DFEVar addr;
  private final DFEVector<DFEVar> data;
  private final DFEVar writeEn;

  public ConvLayerIfmapBuffer(KernelBase<?> owner, ConvLayerParameters params, DFEType scalarT) {
    this(owner, params, scalarT, false, "");
  }

  public ConvLayerIfmapBuffer(KernelBase<?> owner, ConvLayerParameters params, DFEType scalarT,
      boolean loop, String prefix) {
    super(owner);

    this.cp = params;
    this.scalarT = scalarT;

    int width = getWidth();
    int depth = getDepth();

    owner.getManager().logMsg(String.format("Ifmap buffer configuration %d x %d", depth, width));
    // System.out.printf("[ConvLayerIfmapBuffer] width = %d depth = %d\n",
    // width, depth);

    this.addrT = dfeUInt(MathUtils.bitsToAddress(depth));
    this.portVecT = new DFEVectorType<DFEVar>(scalarT, width);

    this.mem = owner.mem.alloc(portVecT, depth);
    this.addr = addrT.newInstance(owner);
    this.data = portVecT.newInstance(owner);
    this.writeEn = dfeBool().newInstance(owner);

    OffsetExpr writeLatency = stream.makeOffsetAutoLoop(prefix + "_IBUF_WRITE_LATENCY");

    if (!loop)
      this.port = mem.port(addr, data, writeEn, RamWriteMode.WRITE_FIRST);
    else {
      this.port = mem.read(addr);

      mem.write(stream.offset(addr, -writeLatency), stream.offset(data, -writeLatency),
          stream.offset(writeEn, -writeLatency));
    }

    if (cp.dbg) {
      debug.simPrintf("[ConvLayerIfmapBuffer] input = %KObj%\n", data);
      debug.simPrintf("[ConvLayerIfmapBuffer] output = %KObj%\n", port);
      debug.simPrintf("[ConvLayerIfmapBuffer] addr = %KObj% %KObj%\n", addr,
          stream.offset(addr, -writeLatency));
      debug.simPrintf("[ConvLayerIfmapBuffer] writeEn = %KObj% %KObj%\n", writeEn,
          stream.offset(writeEn, -writeLatency));
    }
  }

  public DFEType getAddrT() {
    return addrT;
  }

  public DFEVector<DFEVar> port(DFEVector<DFEVar> data, DFEVar addr, DFEVar writeEn) {
    this.data.connect(data);
    this.addr.connect(addr);
    this.writeEn.connect(writeEn);
    return this.port;
  }

  public DFEVectorType<DFEVar> getPortVecT() {
    return portVecT;
  }

  public int getWidth() {
    if (cp.type == Type.POINTWISE)
      return cp.PH * cp.PW * cp.PC;

    return cp.useWinograd ? cp.PC * ConvLayerLineBuffer.WINO_LBUF_NUM_PIPES : cp.PC * cp.PK;
  }

  public int getDepth() {
    if (cp.type == Type.POINTWISE) {
      return cp.H * cp.W * cp.C / (cp.PH * cp.PW * cp.PC);
    } else {
      if (cp.seq == CompSeq.CHANNEL_MAJOR) {
        return cp.useWinograd ? ((cp.H + ConvLayerLineBuffer.WINO_LBUF_PADDING_WIDTH)
            * (cp.W + ConvLayerLineBuffer.WINO_LBUF_PADDING_WIDTH) / ConvLayerLineBuffer.WINO_LBUF_NUM_PIPES)
            : cp.H * (cp.W / cp.PK);
      } else if (cp.seq == CompSeq.FILTER_MAJOR) {
        return cp.useWinograd ? ((cp.C / cp.PC)
            * (cp.H + ConvLayerLineBuffer.WINO_LBUF_PADDING_WIDTH)
            * (cp.W + ConvLayerLineBuffer.WINO_LBUF_PADDING_WIDTH) / ConvLayerLineBuffer.WINO_LBUF_NUM_PIPES)
            : (cp.C / cp.PC) * cp.H * (cp.W / cp.PK);
      } else {
        throw new IllegalArgumentException(String.format(
            "Computation sequence %s has not been supported yet", cp.seq));
      }
    }
  }
}
