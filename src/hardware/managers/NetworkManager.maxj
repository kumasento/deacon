package maxdeep.managers;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import maxdeep.kernels.*;

/**
 * The unique manager for all layers in the neural network
 * @author Ruizhe Zhao <ruizhe.zhao15@imperial.ac.uk>
 */
public class NetworkManager extends CustomManager {

  /*
  // Constants {{{
  private static int CONV_LAYER_H    = 4;
  private static int CONV_LAYER_W    = 4;
  private static int CONV_LAYER_F    = 4;
  private static int CONV_LAYER_C    = 2;
  private static int CONV_LAYER_K    = 3;

  private static int POOLING_LAYER_H = 4;
  private static int POOLING_LAYER_W = 4;
  private static int POOLING_LAYER_C = 4;
  private static int POOLING_LAYER_K = 2;
  private static int POOLING_LAYER_S = 2;

  private static int FC_LAYER_M      = 8;
  private static int FC_LAYER_N      = 4 * 2 * 2;
  // }}}
  // Stream name  {{{
  private static final String CPU_INP_NAME      = "cpu_inp";
  private static final String CPU_OUT_NAME      = "cpu_out";
  private static final String CPU_CONV_WGT_NAME = "cpu_conv_wgt";
  private static final String CPU_FC_WGT_NAME   = "cpu_fc_wgt";
  // }}}
  // Kernel name {{{
  private static final String CONV_LAYER_KERNEL_NAME    = "ConvLayerKernel";
  private static final String FC_LAYER_KERNEL_NAME      = "FCLayerKernel";
  private static final String POOLING_LAYER_KERNEL_NAME = "PoolingLayerKernel";
  private static final String RELU_LAYER_KERNEL_NAME    = "ReLULayerKernel";
  // }}}
  */

  public NetworkManager(EngineParameters params) {
    super(params);
    // Configure {{{
    // By default, allow multiple transitions
    config.setAllowNonMultipleTransitions(true);
    // }}}
    /*
    // Kernel Blocks {{{
    KernelBlock convLayerKernel = addKernel(
        new ConvLayerKernel(
          makeKernelParameters(CONV_LAYER_KERNEL_NAME),
          CONV_LAYER_H,
          CONV_LAYER_W,
          CONV_LAYER_F,
          CONV_LAYER_C,
          CONV_LAYER_K));
    
    KernelBlock poolingLayerKernel = addKernel(
        new PoolingLayerKernel(
          makeKernelParameters(POOLING_LAYER_KERNEL_NAME),
          POOLING_LAYER_H,
          POOLING_LAYER_W,
          POOLING_LAYER_C,
          POOLING_LAYER_K,
          POOLING_LAYER_S));
    
    KernelBlock reLULayerKernel = addKernel(
        new ReLULayerKernel(makeKernelParameters(RELU_LAYER_KERNEL_NAME)));

    KernelBlock fcLayerKernel = addKernel(
        new FCLayerKernel(
          makeKernelParameters(FC_LAYER_KERNEL_NAME),
          FC_LAYER_M,
          FC_LAYER_N));
    // }}}
    // Streams {{{
    DFELink inp     = addStreamFromCPU(CPU_INP_NAME);
    DFELink convWgt = addStreamFromCPU(CPU_CONV_WGT_NAME);
    DFELink out     = addStreamToCPU(CPU_OUT_NAME);
    DFELink fcWgt   = addStreamFromCPU(CPU_FC_WGT_NAME);

    // connect input and output
    convLayerKernel.getInput(ConvLayerKernel.CONV_INP_NAME)
      <== inp;
    convLayerKernel.getInput(ConvLayerKernel.CONV_WGT_NAME)
      <== convWgt;
    poolingLayerKernel.getInput(PoolingLayerKernel.POOLING_INP_NAME)
      <== convLayerKernel.getOutput(ConvLayerKernel.CONV_OUT_NAME);
    reLULayerKernel.getInput(ReLULayerKernel.INP_NAME)
      <== poolingLayerKernel.getOutput(PoolingLayerKernel.POOLING_OUT_NAME);
    fcLayerKernel.getInput(FCLayerKernel.FC_INP_NAME)
      <== reLULayerKernel.getOutput(ReLULayerKernel.OUT_NAME);
    fcLayerKernel.getInput(FCLayerKernel.FC_WGT_NAME)
      <== fcWgt;

    out <== fcLayerKernel.getOutput(FCLayerKernel.FC_OUT_NAME);
    // }}}
    */
  }

  public static EngineInterface interfaceDefault() {
    EngineInterface ei = new EngineInterface();
    /*
    // CONV {{{
    int CONV_LAYER_TICKS    = CONV_LAYER_C * CONV_LAYER_F * CONV_LAYER_H * CONV_LAYER_W;
    int CONV_LAYER_INP_SIZE = CONV_LAYER_C * CONV_LAYER_H * CONV_LAYER_W;
    int CONV_LAYER_WGT_SIZE = CONV_LAYER_K * CONV_LAYER_K * CONV_LAYER_W;

    ei.setTicks(CONV_LAYER_KERNEL_NAME, CONV_LAYER_TICKS);
    ei.setStream(CPU_INP_NAME,      CPUTypes.FLOAT, CONV_LAYER_INP_SIZE * CPUTypes.FLOAT.sizeInBytes());
    ei.setStream(CPU_CONV_WGT_NAME, CPUTypes.FLOAT, CONV_LAYER_WGT_SIZE * CPUTypes.FLOAT.sizeInBytes());
    // }}}
    // FC {{{
    // auto loop offset
    InterfaceParam FCLoopLength = ei.getAutoLoopOffset(FC_LAYER_KERNEL_NAME, "fcLoopLength");
    ei.ignoreAutoLoopOffset(FC_LAYER_KERNEL_NAME, "fcLoopLength");

    InterfaceParam FC_LAYER_TICKS = FCLoopLength * FC_LAYER_N * FC_LAYER_M;
    int FC_LAYER_WGT_SIZE         = FC_LAYER_M * FC_LAYER_N;
    int FC_LAYER_OUT_SIZE         = FC_LAYER_M;

    ei.setTicks(FC_LAYER_KERNEL_NAME, FC_LAYER_TICKS);
    ei.setStream(CPU_FC_WGT_NAME, CPUTypes.FLOAT, FC_LAYER_WGT_SIZE  * CPUTypes.FLOAT.sizeInBytes());
    ei.setStream(CPU_OUT_NAME,    CPUTypes.FLOAT, FC_LAYER_OUT_SIZE * CPUTypes.FLOAT.sizeInBytes());
    // }}}
    // POOLING {{{
    int POOLING_LAYER_TICKS = POOLING_LAYER_C * POOLING_LAYER_H * POOLING_LAYER_W;

    ei.setTicks(POOLING_LAYER_KERNEL_NAME, POOLING_LAYER_TICKS);
    // }}}
    // RELU {{{
    int RELU_LAYER_TICKS = FC_LAYER_N;

    ei.setTicks(RELU_LAYER_KERNEL_NAME, RELU_LAYER_TICKS);
    // }}}
    */
    return ei;
  }
}
