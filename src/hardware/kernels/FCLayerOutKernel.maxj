package maxdeep.kernels;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

/**
 * The fully connected layer for the CNN network
 * @author Ruizhe Zhao <ruizhe.zhao15@imperial.ac.uk>
 * @since  2017-01-05
 */
public class FCLayerOutKernel extends Kernel {

  private static final DFEType DATA_TYPE = dfeFloat(8, 24);

  public static final String INP_NAME  = "inp";
  public static final String OUT_NAME  = "opt";
  public static final String WGT_NAME  = "wgt";
  public static final String BIAS_NAME = "bias";

  public FCLayerOutKernel(
      KernelParameters params,
      int P_V /* number of parallelised dot production */
  ) {
    super(params);

    // Vector Type {{{

    DFEVectorType<DFEVar> VEC_TYPE =
      new DFEVectorType<DFEVar>(DATA_TYPE, P_V);
     
    // }}}
    // Input streams {{{

    DFEVector<DFEVar> inpVec = VEC_TYPE.newInstance(this);

    for (int idx = 0; idx < P_V; idx ++) {
      String suffix = "_" + Integer.toString(idx);
      DFEVar inp = io.input(INP_NAME + suffix, DATA_TYPE);
      // inp.simWatch("inp" + suffix);
      inpVec[idx] <== inp;
    }
    // inpVec.simWatch("inpVec");

    // }}}
    // Output stream {{{

    io.output(OUT_NAME, inpVec, VEC_TYPE);

    // }}}
  }
}
