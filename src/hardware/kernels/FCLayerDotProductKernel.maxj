package maxdeep.kernels;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;

/**
 * The fully connected layer for the CNN network
 * @author Ruizhe Zhao <ruizhe.zhao15@imperial.ac.uk>
 * @since  2017-01-05
 */
public class FCLayerDotProductKernel extends Kernel {

  private static final DFEType DATA_TYPE = dfeFloat(8, 24);

  public static final String INP_NAME  = "inp";
  public static final String OUT_NAME  = "opt";
  public static final String WGT_NAME  = "wgt";
  public static final String BIAS_NAME = "bias";

  public FCLayerDotProductKernel(
      KernelParameters params,
      int M,
      int N
  ) {
    super(params);

    // Auto loop offset {{{

    OffsetExpr loopLength = stream.makeOffsetAutoLoop("fcLoopLength");
    DFEVar L = loopLength.getDFEVar(this, dfeUInt(8));
    L.simWatch("L");

    // }}}
    // Counters {{{

    CounterChain chain = control.count.makeCounterChain();

    DFEVar i = (M == 1)
      ? constant.var(0)
      : chain.addCounter(M, 1).cast(dfeInt(32));

    // col index
    DFEVar j = (N == 1)
      ? constant.var(0)
      : chain.addCounter(N, 1).cast(dfeInt(32));

    // loop index 
    DFEVar l = chain.addCounter(L, 1).cast(dfeUInt(8));

    i.simWatch("i");
    j.simWatch("j");
    l.simWatch("l");

    // }}}
    // Streams {{{
    
    DFEVar inp  = io.input(INP_NAME,  DATA_TYPE, l === 0);
    DFEVar wgt  = io.input(WGT_NAME,  DATA_TYPE, l === 0);
    DFEVar bias = io.input(BIAS_NAME, DATA_TYPE, l === 0 & j === 0);

    inp.simWatch("inp");
    wgt.simWatch("wgt");
    bias.simWatch("bias");

    // }}}
    // Compute {{{

    DFEVar val = DATA_TYPE.newInstance(this);
    DFEVar sum = (j === 0) ? bias : val;
    DFEVar tmp = inp * wgt + sum;
    val <== stream.offset(tmp, -loopLength);
    val.simWatch("val");

    // }}}
    // Output stream {{{

    DFEVar optEnable = (j === N-1) & (l === L-1);
    optEnable.simWatch("optEnable");
    io.output(OUT_NAME, tmp, DATA_TYPE, optEnable);

    // }}}
  }
}
